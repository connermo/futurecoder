#
msgid ""
msgstr ""
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. https://futurecoder.io/course/#AddingStrings
#.     # __code0__:
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+world%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27hello+%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27world%27
msgid "pages.AddingStrings.steps.final_text.text"
msgstr "做得好！以下任意一个都是有效的解决方案："

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_concat.text"
msgstr "字符串可以使用 `+` 连接在一起，尽管这与数字相加的含义非常不同。例如，尝试："

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.0.text"
msgstr "空格是一个字符，就像 `o` 或 `w` 一样。"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid "pages.AddingStrings.steps.hello_world_space.hints.1.text"
msgstr "空格字符必须位于引号内的某个位置。"

#. https://futurecoder.io/course/#AddingStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
msgid ""
"pages.AddingStrings.steps.hello_world_space.messages.literal_answer.text"
msgstr "你仍然必须将两个或更多字符串相加。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.requirements"
msgstr "使用 `+` 将两个或更多字符串相加，以便结果是字符串 `'hello world'`。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.steps.hello_world_space.text"
msgstr "你可以看到 `+` 将两个字符串端对端地组合或连接在一起。从技术上讲，这称为连接。"

#. https://futurecoder.io/course/#AddingStrings
msgid "pages.AddingStrings.title"
msgstr "添加字符串"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.final_text.text"
msgstr "我们进展得非常顺利！你正在解决问题并编写新代码！让我们继续让事情变得更有趣。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.0.text"
msgstr "你应该只使用一个 `print`，因为每个 print 都会在不同的行上输出。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.hints.1.text"
msgstr "你需要使用 `+`。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#.     # __code0__:
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BasicForLoopExercises.steps.loop_exercise_1.text"
msgstr "是时候进行一些练习了！修改这个程序："

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.0.text"
msgstr "暂时忘记循环。你会如何编写一个程序，打印 `name` 3 次？"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.1.text"
msgstr "这个解决方案看起来与我们在这一部分看到的其他程序非常相似。"

#. https://futurecoder.io/course/#BasicForLoopExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.hints.2.text"
msgstr "for 循环会创建一个变量，比如 `character`，但程序不需要使用它。"

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.steps.loop_exercise_2.text"
msgstr "精彩！现在编写一个程序，每个字符打印一次 `name`。例如，对于 `name = 'Amy'`，它应该输出："

#. https://futurecoder.io/course/#BasicForLoopExercises
msgid "pages.BasicForLoopExercises.title"
msgstr "基本的 for 循环练习"

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.steps.final_text.text"
msgstr "这里有一些你需要知道的词："

#. https://futurecoder.io/course/#BasicTerminology
msgid "pages.BasicTerminology.title"
msgstr "基本术语"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.0.text"
msgstr "记住，您可以使用 `*` 来乘以数字。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.1.text"
msgstr "这个程序在结构上与您编写的逐字符构建字符串的程序非常相似。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.2.text"
msgstr "创建一个新列表，然后在 for 循环中逐个元素地构建它。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.3.text"
msgstr "从一个空列表开始。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.4.text"
msgstr "您可以通过简单地写 `[x]` 来创建一个包含一个元素 `x` 的列表。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
msgid "pages.BuildingNewLists.steps.double_numbers.hints.5.text"
msgstr "您可以通过添加一个包含一个元素的列表来向列表中添加一个元素。"

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code0__:
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#.     # __code1__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code2__:
#.     [6, 2, 8, 2, 10, 18, 4, 12, 10]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.BuildingNewLists.steps.double_numbers.text"
msgstr "列表和字符串有很多共同点。"

msgid "pages.BuildingNewLists.steps.filter_numbers.disallowed.0.message"
msgstr "做得好，正确！但是，您应该使用 `.append()` 而不是 `+=`。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.1.text"
msgstr "不同之处在于，有时您应该跳过添加到新列表。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.2.text"
msgstr "使用 `if` 语句。"

#. https://futurecoder.io/course/#BuildingNewLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
msgid "pages.BuildingNewLists.steps.filter_numbers.hints.3.text"
msgstr "使用比较运算符测试一个数字是否足够大以添加。"

#. https://futurecoder.io/course/#BuildingNewLists
#.     # __code2__:
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#.     # __code1__:
#.     some_list.append(element)
#.     # __code0__:
#.     some_list += [element]
#.     # __code3__:
#.     [9, 6]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.element
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.BuildingNewLists.steps.filter_numbers.text"
msgstr "很棒！"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.steps.final_text.text"
msgstr "太棒了！我们正在取得很大进展。"

#. https://futurecoder.io/course/#BuildingNewLists
msgid "pages.BuildingNewLists.title"
msgstr "构建新列表"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.empty_string.text"
msgstr ""
"`name` 中的最后一个字符只在循环结束时添加到 `line` 中，而此时 `print(line)` 已经最后一次运行。因此，该字符和完整的 "
"`name` 永远不会在三角形的底部打印出来。如果你感到困惑，可以尝试将 `print(line)` 放在 `line = line + char` "
"的前面和后面。"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.final_text.text"
msgstr "这不是很漂亮吗？"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.0"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.1"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
msgid ""
"pages.BuildingUpStrings.steps.hello_plus_equals.output_prediction_choices.2"
msgstr "你好！"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.hello_plus_equals.text"
msgstr "在我们查看更多循环之前，我们需要快速学习另一个概念。看看这个程序："

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.0"
msgstr "-"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.1"
msgstr "-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.2"
msgstr "-世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.3"
msgstr "-W-o-r-l-d"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.4"
msgstr "-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.5"
msgstr "-世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.6"
msgstr "-世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
msgid ""
"pages.BuildingUpStrings.steps.name_triangle.output_prediction_choices.7"
msgstr "-世界"

#. https://futurecoder.io/course/#BuildingUpStrings
#.     # __code0__:
#.     temp = hello + '!'
#.     hello = temp
#.     # __code1__:
#.     temp = hello
#.     hello = temp + '!'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.hello
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.temp
msgid "pages.BuildingUpStrings.steps.name_triangle.text"
msgstr ""
"Python 不在乎 `hello` 在 `=` 的左边和右边，它只是做它通常会做的事情，即使变量不同：它计算 `hello + '!'`，此时是 "
"`'Hello' + '!'`，结果是 `'Hello!'`，这成为 `hello` 的新值。如果有帮助，你可以将这一行视为分成两个步骤："

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.0.text"
msgstr "首先确保你不是在使用本页上之前程序的破损版本。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.1.text"
msgstr "也就是说，`line = line + char` 应该在 `print(line)` 之前。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.2.text"
msgstr "除此之外，你只需要做一个 ***微小*** 的更改。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.3.text"
msgstr "我们想去掉 `-`。所以就这样做。字面意思。"

#. https://futurecoder.io/course/#BuildingUpStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.hints.4.text"
msgstr "使用一个空字符串！"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_empty_string.text"
msgstr "不要将空字符串与 `' '` 混淆，后者是一个包含一个字符（空格）的非空字符串。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.0"
msgstr "-W"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.1"
msgstr "-Wo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
msgid ""
"pages.BuildingUpStrings.steps.name_triangle_missing_last_line.output_prediction_choices.2"
msgstr "-"

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.steps.name_triangle_missing_last_line.text"
msgstr "花点时间确保你完全理解这个程序。它做的事情类似于："

#. https://futurecoder.io/course/#BuildingUpStrings
msgid "pages.BuildingUpStrings.title"
msgstr "构建字符串"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.0.text"
msgstr "第一个字母前面应该没有空格，第二个字母前面应该有 1 个空格，第三个字母前面应该有 2 个空格，依此类推。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.1.text"
msgstr "你应该将空格保存在一个变量中，并像之前一样在循环中逐步构建它们。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.2.text"
msgstr "不同之处在于，你需要在构建空格的同时打印字母。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.3.text"
msgstr "换句话说，你需要一个同时完成两者的单一循环。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.4.text"
msgstr "循环的主体需要打印空格和字母，并且还要添加一个空格。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.hints.5.text"
msgstr "由于第一个字母前面不应该有空格，因此在打印字母后需要添加一个空格。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.messages.add_space_first.text"
msgstr "快到了！每个字母前面多了一个空格。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid ""
"pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge.text"
msgstr "太棒了！你真的掌握了这个！"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.final_text.text"
msgstr "哇，没人能阻止你！"

msgid "pages.BuildingUpStringsExercises.steps.name_box.disallowed.0.message"
msgstr "干得好，这个解决方案是正确的！不过，它可以改进。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.0.text"
msgstr "你在上一个练习中完成了所有困难的部分。现在只是一些简单的字符串相加。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.1.text"
msgstr "你只需要一个 for 循环 - 就是上一个练习中用于制作破折号行的那个循环。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.2.text"
msgstr "不要试图一次性完成所有事情。将问题分解成更小、更简单的子问题。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.3.text"
msgstr "尝试编写一个程序，输出："

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.4.text"
msgstr "由于你需要输出三行单独的文本，因此需要调用 `print()` 三次。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
msgid "pages.BuildingUpStringsExercises.steps.name_box.hints.5.text"
msgstr "尝试编写一个程序，输出："

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box.text"
msgstr "太棒了！"

msgid "pages.BuildingUpStringsExercises.steps.name_box_2.disallowed.0.message"
msgstr "干得好，这个解决方案是正确的！"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.0.text"
msgstr "你将需要两个独立的 for 循环遍历 `name`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.1.text"
msgstr "除了第一行和最后一行，每一行中间的字符都是相同的。这意味着你可以重用某些东西。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.2.text"
msgstr "创建一个包含中间空格的变量，并多次使用它。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.hints.3.text"
msgstr "使用一个循环创建一堆空格，使用第二个循环打印一堆使用之前创建的空格的行。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_box_2.text"
msgstr "你越来越擅长这个了！看起来你需要更多的挑战……也许不是把名字放在框里，而是名字应该是框？编写一个程序，输出："

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.0.text"
msgstr "解决方案与原始三角形程序非常相似，只需做一个小改动。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.1.text"
msgstr "你仍然想一次向 `line` 添加一个字符，这只是一个添加位置的问题。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.2.text"
msgstr "你希望行是反向的，因此需要反转/翻转某些内容。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.3.text"
msgstr "你需要在字符串之前添加字符，而不是之后。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_backwards.hints.4.text"
msgstr "3 + 7 等于 7 + 3。所有数字都是如此。这对字符串也成立吗？"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_backwards.text"
msgstr "非常好！现在修改程序，使每一行都是反向的，如下所示："

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.0.text"
msgstr "你需要再使用一个 `+`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
msgid ""
"pages.BuildingUpStringsExercises.steps.name_triangle_spaced.hints.1.text"
msgstr "你需要使用一个由一个空格组成的字符串：`' '`。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text"
msgstr "修改这个程序："

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.0.text"
msgstr "查看三角形程序以获取灵感。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.1.text"
msgstr "查看你为每个字符打印 `name` 的程序以获取灵感。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.2.text"
msgstr "你需要逐个字符构建一个破折号（`-`）的字符串。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.hints.3.text"
msgstr "for 循环将创建一个变量，例如 `char`，但程序不需要使用它。"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
#.     # __code0__:
#.     line = line + char
#.     # __code1__:
#.     line += char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
msgid "pages.BuildingUpStringsExercises.steps.name_underlined.text"
msgstr "精彩！"

#. https://futurecoder.io/course/#BuildingUpStringsExercises
msgid "pages.BuildingUpStringsExercises.title"
msgstr "构建字符串练习"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.final_text.text"
msgstr "错误信息中的“attribute”一词指的是使用 `.` - 错误实际上仅来自 `word.append`，甚至没有调用。"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.introducing_callable.text"
msgstr ""
"像 `len(things)` 或 `print(things)` 这样的表达式是一个函数 ***调用*** - 当你写下这个时，你是在 "
"***调用*** 函数 `len` 或 `print`。这意味着函数是 ***可调用的***："

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.len_of_none.text"
msgstr ""
"`None` 是一个特殊的“空”值，不能做任何有趣的事情。它是一个常见的占位符，表示缺少一个真正有用的值。那些不想返回任何东西的函数默认返回 "
"`None`。如果你看到关于 `None` 或 `NoneType` 的错误信息，通常意味着你将错误的东西赋值给了一个变量："

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.methods_of_str.text"
msgstr ""
"***方法*** 是属于某种类型的函数，可以使用 `.` 在该类型的所有值上调用。例如，`upper` 和 `lower` 是字符串的方法，可以通过例如"
" `word.upper()` 调用："

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.no_append_for_str.text"
msgstr "另一个例子是 `append` 是列表的方法。但你不能在列表上使用 `.upper` 或在字符串上使用 `.append`："

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.not_callable.text"
msgstr "大多数东西是不可调用的，因此尝试调用它们会给你一个错误："

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_functions.text"
msgstr "现在是时候扩展你的词汇了。"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.steps.print_returns_none.text"
msgstr ""
"在调用 `len(things)` 中，`things` 是一个 ***参数***。有时你也会看到单词 "
"***parameter***，它基本上与参数的意思相同。这有点像你在将参数给函数 - 我们具体说参数 `things` 被 *传递* 给 "
"`len`，而 `len` *接受* 或 *接收* 这个参数。"

#. https://futurecoder.io/course/#CallingFunctionsTerminology
msgid "pages.CallingFunctionsTerminology.title"
msgstr "术语：调用函数和方法"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.final_text.text"
msgstr "`birdseye` 只显示一个帧（函数调用）。一开始你会看到全局帧。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many.text"
msgstr "函数的主体可以包含任何内容，包括函数调用。事实上，我们已经通过调用"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.requirements"
msgstr "运行与上面相同的程序，但使用 `birdseye`。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye.text"
msgstr "每次调用函数时，都会创建一个新的 *帧*，其中包含该调用中的局部变量值"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.requirements"
msgstr "运行与上面相同的程序，但使用 Python Tutor。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor.text"
msgstr "`snoop` 在每个函数调用开始时："

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid ""
"pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.requirements"
msgstr "运行与上面相同的程序，但使用 `snoop`。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop.text"
msgstr "了解这里发生的事情并知道如何探索函数调用非常重要，因此我们将尝试在每个调试器中进行此操作。"

#. https://futurecoder.io/course/#CallingFunctionsWithinFunctions
msgid "pages.CallingFunctionsWithinFunctions.title"
msgstr "在函数中调用函数"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.0.text"
msgstr "棋盘上有多少条对角线？"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.1.text"
msgstr "三个子列表的哪些条目构成每条对角线？你如何访问这些条目？"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.2.text"
msgstr "每个列表总是有 3 个条目，所以不需要循环。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.3.text"
msgstr "这里有两个问题需要解决：检查特定对角线是否获胜，以及组合每条对角线的检查。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.4.text"
msgstr "一个问题可以使用 `and` 来解决，另一个可以使用 `or`。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.5.text"
msgstr "与 `all_equal` 函数有很多相似之处。你甚至可以调用那个函数来帮助！但你必须包括它的定义。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.6.text"
msgstr "类似于 `all_equal`，检查对角线上的 3 个条目是否相等，例如使用 `and`。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.hints.7.text"
msgstr "使用 `or` 一起检查两个对角线。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code4__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code3__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#.     # __code1__:
#.     (True or False) and False
#.     # __code2__:
#.     True or (False and False)
#.     # __code0__:
#.     True or False and False
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
msgid "pages.CombiningAndAndOr.steps.AndHasHigherPriority.text"
msgstr "如果你从左到右随意阅读，你可能会认为："

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.steps.CombiningAndOr.text"
msgstr "如果你在一个表达式中同时使用 `and` 和 `or`，这就像组合 `*` 和 `+`。"

#. https://futurecoder.io/course/#CombiningAndAndOr
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#.     # __code1__:
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.CombiningAndAndOr.steps.final_text.text"
msgstr "做得好！这是一个难题。以下是一些可能的解决方案："

#. https://futurecoder.io/course/#CombiningAndAndOr
msgid "pages.CombiningAndAndOr.title"
msgstr "组合 `and` 和 `or`"

#. https://futurecoder.io/course/#CombiningCompoundStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.CombiningCompoundStatements.steps.final_text.text"
msgstr ""
"注意 `if` 语句的主体（4 行）按常规缩进，而 `for` 循环的主体（1 行）在每行缩进了额外的 4 个空格，以显示这些行在 `for` "
"循环内。您可以通过查看缩进来看到程序的整体结构。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.0"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.2"
msgstr "你好，世界!!!!!!!!!!!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.3"
msgstr "!!!!!!!!!!!你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.4"
msgstr "你好，世界!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.5"
msgstr "!你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.6"
msgstr "!你好，世界!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.7"
msgstr "H!e!l!l!o! !W!o!r!l!d!"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
msgid ""
"pages.CombiningCompoundStatements.steps.for_inside_if.output_prediction_choices.8"
msgstr "!H!e!l!l!o! !W!o!r!l!d"

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.steps.for_inside_if.text"
msgstr ""
"像 `for` 循环和 `if` 语句这样的复合语句有主体，它们是内部语句的列表。这些内部语句可以是任何东西，包括其他复合语句。尝试这个在 `if` "
"语句内的 `for` 循环示例，当您想要显示您*真的*很兴奋时："

#. https://futurecoder.io/course/#CombiningCompoundStatements
msgid "pages.CombiningCompoundStatements.title"
msgstr "组合复合语句"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.0.text"
msgstr "你必须在函数定义头中更改名称，但这还不是全部。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.1.text"
msgstr "如果你只是更改函数定义头中的名称，会发生什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.2.text"
msgstr "你会得到一个错误。看看这个消息。它在告诉你什么？错误来自哪里？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.3.text"
msgstr "如果你的函数叫 `say_hello`，那么 `greet(\"Alice\")` 是什么意思？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.4.text"
msgstr "你需要更改程序中的确切 3 行。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.5.text"
msgstr "在每一行中，你更改的正好是一个单词。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.6.text"
msgstr "不要触碰函数的主体。它仍然应该包含 `print(\"How are you?\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
msgid "pages.DefiningFunctions.steps.change_function_name.hints.7.text"
msgstr "在定义函数后，你仍然应该调用函数两次，参数为 `\"Alice\"` 和 `\"Bob\"`。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.change_function_name.text"
msgstr "注意程序的输出是如何变化的。`How are you?` 被打印了两次。你可以将整个程序视为等同于这个："

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.0.text"
msgstr "你必须在函数定义头中更改参数名称，但这还不是全部。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.1.text"
msgstr "如果你只是更改函数定义头中的参数名称，会发生什么？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.2.text"
msgstr "你会得到一个错误。看看这个消息。它在告诉你什么？错误来自哪里？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.3.text"
msgstr "如果参数叫 `person_name`，那么 `print(f\"Hello {name}!\")` 是什么意思？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.4.text"
msgstr "你需要更改程序中的确切 2 行。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.5.text"
msgstr "在每一行中，你更改的正好是一个单词。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.6.text"
msgstr "不要触碰函数定义后的部分，即 `say_hello(\"Alice\")` 和 `say_hello(\"Bob\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
msgid "pages.DefiningFunctions.steps.change_parameter_name.hints.7.text"
msgstr "你仍然应该在函数主体中有两个语句，包括 `print(\"How are you?\")`。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.change_parameter_name.text"
msgstr "很好！现在做一个类似的练习：将参数的名称从 `name` 更改为 `person_name`。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.define_greet.text"
msgstr ""
"你已经看到如何调用像 `print()` 和 `len()` "
"这样的函数。现在你将学习如何编写你自己的函数，以供你或其他人使用。这在程序变得更大更复杂时非常重要。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.final_text.text"
msgstr "完美！现在你对定义函数的基础知识有了扎实的基础。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.0"
msgstr "你好，Alice！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.1"
msgstr "你好，Alice！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
msgid "pages.DefiningFunctions.steps.how_are_you.output_prediction_choices.2"
msgstr "你好，Alice！"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.how_are_you.requirements"
msgstr ""
"在 `print(f\"Hello {name}!\")` 后添加 `print(\"How are "
"you?\")`，并保持相同的缩进。保持定义后的两个 `greet` 调用不变。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22How+are+you%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Hello+%7Bname%7D%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.greet
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.DefiningFunctions.steps.how_are_you.text"
msgstr "函数定义是一个复合语句。像 `if` 和 `for` 一样，它有一个头行，后面跟着一个缩进的主体，可以包含一个或多个语句。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.2"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.3"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
msgid "pages.DefiningFunctions.steps.print_many.output_prediction_choices.4"
msgstr "H"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_many.text"
msgstr "函数可以有多个参数。尝试下面的例子："

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.0.text"
msgstr "这里没有聪明的问题解决，这只是关于遵循定义函数的步骤。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.1.text"
msgstr "确保你有上面列出的函数的所有部分。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.2.text"
msgstr "这包括 `def`、`()` 和 `:`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.3.text"
msgstr "确保你的函数命名为 `print_twice`。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.4.text"
msgstr "确保它接受一个名为 `x` 的参数，在括号 `()` 中。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.5.text"
msgstr "查看上面定义的其他函数以获取帮助。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.6.text"
msgstr "在函数主体中使用参数。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.7.text"
msgstr "确保主体是缩进的。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.8.text"
msgstr "主体需要两个语句或一个非常简单的循环。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
msgid "pages.DefiningFunctions.steps.print_twice_exercise.hints.9.text"
msgstr "确保你不要在 `print_twice` 的函数主体内调用 `print_twice`。检查你的缩进。"

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.steps.print_twice_exercise.requirements"
msgstr "编写一个程序，定义一个名为 `print_twice` 的函数，如上所述。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     Hello
#.     Hello
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.Hello
msgid "pages.DefiningFunctions.steps.print_twice_exercise.text"
msgstr "做得好！"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.0.text"
msgstr "对函数定义的唯一更改应该是按指示交换参数，别无其他。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.1.text"
msgstr "你需要修复对 `print_many` 的调用。"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.2.text"
msgstr "如果函数定义为 `def print_many(n, thing)`，那么 `print_many(\"Hello\", 3)` 是什么意思？"

#. https://futurecoder.io/course/#DefiningFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
msgid "pages.DefiningFunctions.steps.swap_parameters.hints.3.text"
msgstr "我们仍然希望 `thing = \"Hello\"` 和 `n = 3`。"

#. https://futurecoder.io/course/#DefiningFunctions
#.     # __code0__:
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#.     # __code1__:
#.     def print_many(n, thing):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Hello%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_many
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
msgid "pages.DefiningFunctions.steps.swap_parameters.text"
msgstr "注意在函数定义和函数调用中用于分隔参数和参数的逗号，以及定义和调用之间的对应关系："

#. https://futurecoder.io/course/#DefiningFunctions
msgid "pages.DefiningFunctions.title"
msgstr "定义函数"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.0.text"
msgstr "请记住，我们之前在函数中有 `for item in cart`，但 `cart` 不再是一个参数。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.1.text"
msgstr "现在 `quantities` 是唯一一个定义客户购买内容的参数。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.2.text"
msgstr "你需要遍历 `quantities` 的键。请记住，这里的“遍历”是指使用 `for` 循环“循环遍历”。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.hints.3.text"
msgstr "你可以使用 `.keys()`，但你不必这样做。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text"
msgstr "现在你可以使用这个来修改我们上一页的函数，以移除 `cart` 参数："

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.0.text"
msgstr "你需要遍历（循环）字典。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.1.text"
msgstr "你需要打印每个字典条目的键（英语单词）和值（法语单词）。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.hints.2.text"
msgstr "你可以像往常一样使用键来获取值。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_french.text"
msgstr "这看起来不错！我们已经完全解决了计算总成本的问题。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.0.text"
msgstr "这仍然与之前的练习非常相似，目前没有特别之处。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.1.text"
msgstr "你可以重用之前的解决方案，只需添加另一个参数和一点点代码。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.hints.2.text"
msgstr "你现在需要打印一个字典键和两个字典值。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apfel%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27boite%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27kasten%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27pomme%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.french
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.german
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_words
msgid "pages.DictionaryKeysAndValues.steps.english_to_german.text"
msgstr "太好了！现在让我们添加一个德语字典："

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.final_text.text"
msgstr "恭喜！到目前为止，你已经完成了课程的最后一部分。更多内容正在进行中！"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.requirements"
msgstr "在 `quantities` 是一个字典的地方运行 `print(quantities.keys())`。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
msgid "pages.DictionaryKeysAndValues.steps.introducing_keys.text"
msgstr "将这段代码复制到编辑器中："

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable.text"
msgstr "`dict` 的 `.keys()` 方法基本上做了你所期望的。你可以像遍历列表一样遍历它返回的值："

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.requirements"
msgstr ""
"运行与上一步相同的代码，但在 `quantities` 后面不加 `.keys()`，所以中间的行是 `for key in quantities:`。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.steps.keys_are_iterable2.text"
msgstr "实际上，你甚至不需要 `.keys()`。直接遍历字典会自动遍历其键。"

#. https://futurecoder.io/course/#DictionaryKeysAndValues
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.DictionaryKeysAndValues.steps.nested_dictionaries.text"
msgstr "美妙！这里出现了一个模式。这两种语言可以合并成一个大的嵌套字典："

#. https://futurecoder.io/course/#DictionaryKeysAndValues
msgid "pages.DictionaryKeysAndValues.title"
msgstr "遍历字典键"

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     list2 = list1.copy()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.list2
msgid "pages.EqualsVsIs.steps.final_text.text"
msgstr ""
"现在 `list1 is list2` 是 `True`，因为 *只有一个列表*，而两个变量 `list1` 和 `list2` 都指向那个相同的列表。"
" `list1.append(4)` 追加到那个列表，结果可以在 `print(list1)` 和 `print(list2)` "
"中看到，因为这两行现在只是打印同一个列表的不同方式。"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.requirements"
msgstr "运行与上面相同的程序，但将 *第二个* `[1, 2, 3]` 替换为 `list1`。"

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.steps.same_list.text"
msgstr ""
"这个程序相当简单，主要由你熟悉的内容组成。我们创建了两个指向列表的变量。列表具有相同的元素，因此它们是相等的：`list1 == list2` 是 "
"`True`。"

#. https://futurecoder.io/course/#EqualsVsIs
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.EqualsVsIs.steps.two_separate_lists.text"
msgstr "是时候学习一些经常被误解并导致错误的技术细节了。运行这个程序："

#. https://futurecoder.io/course/#EqualsVsIs
msgid "pages.EqualsVsIs.title"
msgstr "`==` 与 `is`，以及一个值的多个名称"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text"
msgstr "让我们回顾一下如何处理列表。假设我们有一个列表 `nums = [1, 2, 3]`。你可以使用："

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.index(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text"
msgstr "**`index`**：使用语法返回列表中值的第一个索引"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，`y = ` 后面跟着一行从列表中精确复制的行，以及 `print(y)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.1.text"
msgstr "哪些代码行创建了一个新列表而不是修改？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.2.text"
msgstr "`x` 是一个列表。`x` 的每个元素都是一个字符串。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.3.text"
msgstr "你可以将列表相加，你可以将字符串相加，但你不能将字符串和列表相加。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.hints.4.text"
msgstr "如何创建一个包含一个元素的列表？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从之前的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。不要替换 `y = ` "
"部分，它应该仍然在你输入的行之前，位于同一行上。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text"
msgstr "很棒！"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.pop(index)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text"
msgstr "**`pop`**：使用语法移除并返回给定 *索引* 处的元素"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，然后一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.1.text"
msgstr "将第一个元素移动到最后需要两件事。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.2.text"
msgstr "移除第一个元素..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.3.text"
msgstr "并将其添加到末尾。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.4.text"
msgstr "你可以使用哪些函数/方法来做到这一点？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.hints.5.text"
msgstr "记住，第一个索引是 0。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从之前的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x[len(x)] = x[0]
#.     x[len(x) - 1] = x[0]
#.     x[len(x) + 1] = x[0]
#.     x + x[0]
#.     [x] + x[0]
#.     x + [x[0]]
#.     [x] + [x[0]]
#.     x + x.pop(0)
#.     [x] + x.pop(0)
#.     x + [x.pop(0)]
#.     [x] + [x.pop(0)]
#.     x.pop(x.append(0))
#.     x.append(x.pop(0))
#.     x.append(x[0])
#.     x.append(x.index(0))
#.     x.index(x.append(0))
#.     x.pop(x.index(0))
#.     x.index(x.pop(0))
#.     # __code1__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text"
msgstr "现在你将解决四个简短的练习，涉及这些概念。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.0.text"
msgstr "你的解决方案应该有正好三条语句：`x = [1, 2, 0, 3]`，一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.1.text"
msgstr "`x.remove(0)` 做了什么？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.2.text"
msgstr "它移除了一个元素！"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.3.text"
msgstr "哪个函数/方法也可以移除一个元素？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.4.text"
msgstr "另一个函数/方法不能简单地被告知 '移除 0'，它需要不同类型的信息。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.5.text"
msgstr "具体来说，它需要被告知 0 在哪里。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_exercise
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.hints.6.text"
msgstr "哪个函数/方法提供那种信息？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `x.remove(0)` 替换为从之前的长列表中精确复制的一行。你选择的行应该与 `x.remove(0)` "
"有相同的效果，以便程序打印 `[1, 2, 3]`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = [1, 2, 0, 3]
#.     x.remove(0)
#.     print(x)
msgid "pages.FunctionsAndMethodsForLists.steps.remove_exercise.text"
msgstr "干得好。现在最后一个练习："

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list.remove(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text"
msgstr "**`remove`**：使用语法移除给定 *值* 的第一次出现"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，然后一行从列表中精确复制（没有添加），以及 `print(x)`。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.1.text"
msgstr "你需要获取 `x` 中第一个元素的值..."

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.2.text"
msgstr "并将该值赋给 `x` 中的最后一个位置。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.3.text"
msgstr "如何在列表中为特定索引赋值？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.hints.4.text"
msgstr "`x` 中第一个和最后一个元素的索引是什么？"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` "
"替换为从上一步的长列表中精确复制的一行。你必须选择正确的行，只有一个正确答案。准确输入这一行。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text"
msgstr "干得好。在下一个练习中，从相同的不完整程序开始："

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
#.     # __code0__:
#.     some_list[index] = new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.index
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.new_value
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid ""
"pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text"
msgstr "正如你所看到的，`+` 不会修改 `nums`，但 `append` 会。"

#. https://futurecoder.io/course/#FunctionsAndMethodsForLists
msgid "pages.FunctionsAndMethodsForLists.title"
msgstr "列表的函数和方法"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.final_text.text"
msgstr "如果你仍然对 `range` 和/或 `len` 不太熟悉，可以练习和尝试一下。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.index_error
msgid "pages.GettingElementsAtPosition.steps.index_error.program"
msgstr "words[4]"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.requirements"
msgstr "运行类似 `words[3]` 的代码，但将 `3` 替换为一个更大的数字。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.index_error.text"
msgstr "通常，你可以通过 `words[i]` 获取位置为 `i` 的元素。这个操作称为 *下标* 或 *索引*，位置称为 *索引*。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.indices_out_of_bounds.text"
msgstr "现在在 shell 中尝试 `__program__`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.0"
msgstr "这是"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.2"
msgstr "0"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.3"
msgstr "这是"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.4"
msgstr "0"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.output_prediction_choices.5"
msgstr "这是"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_len_and_range
msgid ""
"pages.GettingElementsAtPosition.steps.introducing_len_and_range.program"
msgstr "words = ['这是', '一个', '列表']"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_len_and_range.text"
msgstr "你看。`words[4]` 及其之后的元素不存在，因此尝试这样会给你一个错误。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.introducing_subscripting
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.program"
msgstr "words = ['这是', '一个', '列表']"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.introducing_subscripting.text"
msgstr "循环很好，但通常你只想从已知位置的列表中检索单个元素。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.0.text"
msgstr "记得我们之前使用过 `range(4)`。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.1.text"
msgstr "这次，它应该适用于任何列表。如果列表有 5 个元素，或者 10 个呢？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
msgid ""
"pages.GettingElementsAtPosition.steps.print_indices_and_words.hints.2.text"
msgstr "结合你学到的两个函数！"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.words
msgid "pages.GettingElementsAtPosition.steps.print_indices_and_words.text"
msgstr "所以一般来说，有效的索引是："

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.0.text"
msgstr "要访问列表的最后一个元素，你需要最后位置的索引。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.1.text"
msgstr "如果列表有 2 个元素，第一个元素在索引 0，因此最后一个元素在索引 1。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.2.text"
msgstr "同样，如果列表有 3 个元素，最后一个元素将在索引 2。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.3.text"
msgstr "你看到这些数字之间的模式了吗？你能如何表达它？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
msgid "pages.GettingElementsAtPosition.steps.print_last_element.hints.4.text"
msgstr "你能想出一个适用于任何长度的通用解决方案吗？"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.print_last_element.text"
msgstr "练习：对于任何非空列表 `words`，打印最后一个元素。例如，如果"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
msgid ""
"pages.GettingElementsAtPosition.steps.printing_the_range.output_prediction_choices.4"
msgstr "这是"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.printing_the_range.text"
msgstr "如你所见，结果是一样的。试试这个："

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid ""
"pages.GettingElementsAtPosition.steps.range_almost_the_same_as_list.text"
msgstr "`range(4)` 和 `[0, 1, 2, 3]` 是一样的……几乎是。尝试在 shell 中运行 `__program__`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_len
msgid "pages.GettingElementsAtPosition.steps.range_len.program"
msgstr "words = ['这是', '一个', '列表']"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.requirements"
msgstr "运行前一步的相同程序，但将第二行 `indices = [0, 1, 2, 3]` 替换为 `indices = range(4)`。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_len.text"
msgstr "这好一点，但写出 `[0, 1, 2, ...]` 并不好，尤其是当它变得很长时。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.0"
msgstr "range(4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.1"
msgstr "range(0, 4)"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.2"
msgstr "list(range(4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.3"
msgstr "list(range(0, 4))"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.range_versus_list
msgid ""
"pages.GettingElementsAtPosition.steps.range_versus_list.output_prediction_choices.4"
msgstr "range(0, 1, 2, 3)"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.steps.range_versus_list.text"
msgstr "这可能有点让人惊讶。如果你感到好奇，`0` 代表范围的起始。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.program"
msgstr "words = ['这是', '一个', '列表']"

#. https://futurecoder.io/course/#GettingElementsAtPosition
#.     # __code0__:
#.     [0, 1, 2, ..., n - 2, n - 1]
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.GettingElementsAtPosition.steps.using_len_first_time.text"
msgstr "这只是一个演示，让你以更熟悉的形式看到范围。"

#. https://futurecoder.io/course/#GettingElementsAtPosition
msgid "pages.GettingElementsAtPosition.title"
msgstr "获取位置的元素，`range()` 和 `len()`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.final_text.text"
msgstr "太棒了！休息一下，你值得拥有！"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.0.text"
msgstr "你需要查看 `things` 的所有可能索引，并检查哪个是答案。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.1.text"
msgstr "要查看所有可能的索引，你需要在 `range(len(things))` 上循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.2.text"
msgstr "要检查一个索引是否是答案，你需要使用："

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.3.text"
msgstr "- `if`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.4.text"
msgstr "- 在下标中使用索引"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.5.text"
msgstr "- `==`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.6.text"
msgstr "由于你在寻找第一个索引，一旦找到一个就需要停止循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.7.text"
msgstr "你最近学会了如何在中间停止循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.hints.8.text"
msgstr "你需要使用 `break`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.all_indices.text"
msgstr "你快到了！然而，这会打印所有的索引，而不仅仅是第一个。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.index_exercise.messages.last_index.text"
msgstr "你快到了！然而，这会打印 *最后* 一个索引，而不是第一个。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.index_exercise.text"
msgstr ""
"给定一个列表 `things` 和一个值 `to_find`，打印 `to_find` 在列表中的第一个索引，即满足 `things[i]` 是 "
"`to_find` 的最小数字 `i`。例如，对于"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.0.text"
msgstr "你在 shell 中尝试过字符串的索引和 `len()` 吗？"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.1.text"
msgstr "暂时忘记循环。你如何打印第一行，即每个字符串的第一个字符？"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.2.text"
msgstr "在第二行，你想打印每个字符串的第二个字符，依此类推。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.3.text"
msgstr "你需要一个 `for` 循环。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.4.text"
msgstr "你需要索引（下标）。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.5.text"
msgstr "你需要 `range`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.6.text"
msgstr "你需要 `len`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.7.text"
msgstr "你需要 `+`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.8.text"
msgstr "你需要对两个字符串进行索引。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_exercise.hints.9.text"
msgstr "你每次都需要将相同的索引传递给两个字符串，以检索匹配的字符。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.steps.zip_exercise.text"
msgstr "很好！"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.0.text"
msgstr "解决方案具有与之前解决方案相同的整体结构和基本元素，但它显著更长，并且需要一些额外的想法和部分。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text"
msgstr "特别是，它仍然应该包含类似于："

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.2.text"
msgstr "`range()` 中应该放什么？`len(string1)` 和 `len(string2)` 都不够好。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.3.text"
msgstr "你希望对较长字符串中的每个字符进行循环迭代。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.4.text"
msgstr "这意味着你需要 `range(<最长字符串的长度>)`"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.5.text"
msgstr "换句话说，你需要找到两个值 `len(string1)` 和 `len(string2)` 中的最大值。你已经做过类似的练习。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.6.text"
msgstr ""
"一旦你解决了 `for i in range(...)`，`i` 有时会太大而无法作为两个字符串的有效索引。你需要在索引之前检查它是否太大。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.7.text"
msgstr "记住，`string1` 的最大有效索引是 `len(string1) - 1`。`len(string1)` 太大了。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.8.text"
msgstr "你需要两个 `if` 语句，一个用于每个字符串。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.9.text"
msgstr "当 `string1[i]` 无效时，你需要设置例如 `char1 = ' '`。"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
#.     # __code0__:
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string2
msgid ""
"pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text"
msgstr "难以置信！"

#. https://futurecoder.io/course/#GettingElementsAtPositionExercises
msgid "pages.GettingElementsAtPositionExercises.title"
msgstr "使用 `range()` 和 `len()` 的练习"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.dir_list.text"
msgstr "完美！"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.final_text.text"
msgstr ""
"`dir()` 返回参数的属性列表，这些属性大多是方法。许多方法以 `__` 开头，你可以暂时忽略它们 - 滚动到列表的末尾，你会看到一些熟悉的方法。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.0.text"
msgstr "在你的搜索查询中使用“python”和“list”这两个词。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.1.text"
msgstr "我们想把值放在 ____________ 而不是放在开头或结尾？"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.2.text"
msgstr "'在中间' 或 '在某个索引' 或 '在特定位置'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.hints.3.text"
msgstr "'python 在索引处添加值'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.requirements"
msgstr ""
"运行与上面三行类似的代码，但将 `nums.append(9)` 更改为正确的函数/方法调用，以便将 9 放在第二个元素（在示例 `nums = [1,"
" 2, 3, 4, 5]` 中是 2）之后，而不是放在末尾。中间行应该是什么只有一个正确答案。你需要在线搜索以找出使用哪个函数/方法以及如何使用它。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#.     # __code0__:
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#.     # __code1__:
#.     [1, 2, 3, 4, 5, 9]
#.     # __code2__:
#.     [1, 2, 9, 3, 4, 5]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.nums
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text"
msgstr "找得好！我们再做一个。考虑这个程序："

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.0.text"
msgstr "在你的搜索查询中使用“python”和“list”这两个词。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.1.text"
msgstr "用一个词来说，列表 `[21, 55, 4, 91, 62, 49]` 中的 `91` 有什么特别之处？"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.2.text"
msgstr "'最大' 或 '最大的'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.sum_list
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.hints.3.text"
msgstr "'python 列表中的最大值'"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid ""
"pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.requirements"
msgstr ""
"运行类似于 `sum([21, 55, 4, 91, 62, 49])` 的代码，但将 `sum` "
"替换为另一个特定函数的名称。应该使用的函数只有一个正确答案。你需要在线搜索以找出哪个。它是 Python 中一个常用的内置函数。"

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.steps.sum_list.text"
msgstr ""
"了解我们刚刚讨论的函数是有用的，但学习所有函数并不容易，还有很多其他函数。更重要的技能是能够查找信息。例如，如果你忘记了这些函数的名称，以下是一些你可能会谷歌搜索的典型方式："

#. https://futurecoder.io/course/#HowToFindInformationWithGoogleAndMore
msgid "pages.HowToFindInformationWithGoogleAndMore.title"
msgstr "如何使用 Google 等查找信息"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.0.text"
msgstr "你已经学会了完成这个所需的所有工具。我相信你！查看之前的程序以获取灵感。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.1.text"
msgstr "你需要一个循环来逐个字符构建新的句子。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.2.text"
msgstr "你需要一个 `if/else` 来选择是添加大写字母还是小写字母。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.3.text"
msgstr "你的 `if/else` 需要根据循环的迭代执行不同的代码块。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.4.text"
msgstr "这意味着你的 `if` 条件需要是一个在循环内部变化的变量。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
msgid "pages.IfAndElse.steps.capitalise.hints.5.text"
msgstr "在第一次迭代中，你需要一个大写字母。在随后的迭代中，你需要一个小写字母。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.capitalise.text"
msgstr "挑战开始了！"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.0.text"
msgstr "不要改变已经存在的任何内容，只需添加一些代码。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.1.text"
msgstr "`else` 需要紧接在 `if` 代码块后面，中间不要有其他内容。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.2.text"
msgstr "`sentence += char` 需要在 `excited` 为 `True` 或 `False` 时都能执行。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.3.text"
msgstr "你 *可以* 在 `if` 和 `else` 块中都有一份 `sentence += char`，但有更好的方法。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.4.text"
msgstr "使用 `else` 为 `char` 赋一个不同的值。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
msgid "pages.IfAndElse.steps.else_full_stop.hints.5.text"
msgstr "如果 `excited` 为 `False`，那么 `char` 应该是 `'.'` 而不是 `'!'`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.else_full_stop.text"
msgstr ""
"如果 `excited` 为真，那么 `char` 被定义，一切运行正常。但否则 `char` 从未被赋值，因此在 `sentence += char`"
" 中使用它会失败。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.final_text.text"
msgstr "完美！花点时间为你所取得的成就感到自豪。你能感受到你的大脑在成长吗？"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else.text"
msgstr "`if` 语句可以选择性地有一个 `else` 部分。运行这个例子："

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.requirements"
msgstr "运行上一步的相同程序，但将 `True` 替换为 `False`，使得 `condition = False`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.first_if_else_false.text"
msgstr "现在将第一行更改为 `condition = False` 并再次运行。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower.text"
msgstr ""
"将 `else` 理解为“或者”或“否则”。这意味着如果 `if` 中的条件为假，则会运行 `else` "
"的代码块。无论条件是真还是假，两个代码块中恰好有一个会运行。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.requirements"
msgstr "运行上一步的相同程序，但将 `True` 替换为 `False`，使得 `excited = False`。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.if_upper_else_lower_false.text"
msgstr ""
"`sentence.upper()` 是我们尚未遇到的一种新表达式。这里发生的事情是 `sentence` 是一个字符串，字符串有各种 *方法* "
"让你方便地从中计算出新值，包括 `upper` 和 `lower`。这些名称指的是大写字母（大写字母）和小写字母（小写字母）。`'Hello "
"World'.upper()` 计算为 `'HELLO WORLD'`。不过，它不会改变 `sentence` 的内容，因此你必须再次用 "
"`sentence = sentence.upper()` 赋值。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.0.text"
msgstr "这与之前的练习类似。不同之处在于你设置条件变量的时间和地点。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.1.text"
msgstr "你需要有一个布尔变量，它在每次迭代时都会变化。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.2.text"
msgstr ""
"首先编写一个小程序，该程序接受一个布尔变量并翻转它，即如果变量为 `True`，则变为 `False`，如果最初为 `False`，则变为 "
"`True`。不使用循环，只需一个 `if/else`。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.3.text"
msgstr "你需要在 `if` 条件中使用该变量，并在代码块中对同一变量进行赋值。"

#. https://futurecoder.io/course/#IfAndElse
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
msgid "pages.IfAndElse.steps.spongebob.hints.4.text"
msgstr "将那个翻转的 `if/else` 与选择大写或小写字符的 `if/else` 结合起来。"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.spongebob.text"
msgstr "太棒了！！！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
msgid "pages.IfAndElse.steps.undefined_char.output_prediction_choices.1"
msgstr "Hello World!"

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.steps.undefined_char.requirements"
msgstr ""
"复制上面的程序。如果你愿意，可以按原样运行它。然后将 `excited = True` 更改为 `excited = False` 并再次运行。"

#. https://futurecoder.io/course/#IfAndElse
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IfAndElse.steps.undefined_char.text"
msgstr "这是一个有问题的程序："

#. https://futurecoder.io/course/#IfAndElse
msgid "pages.IfAndElse.title"
msgstr "`if` 和 `else`"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.final_text.text"
msgstr ""
"当你缩进时，应该始终缩进4个空格。任何一致的缩进都是可以接受的，但4个空格是几乎所有人遵循的约定。请注意，编辑器通常会为你简化这个过程。例如，如果你在编辑器中按下键盘上的'Tab'键，它会为你插入4个空格。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.mismatched_indentations
msgid "pages.Indentation.steps.mismatched_indentations.program"
msgstr "for character in name:"

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.steps.mismatched_indentations.text"
msgstr ""
"由于`print('---')`没有缩进，因此它不是循环体的一部分。这意味着它只在整个循环完成后运行一次。这两个程序都是有效的，只是执行不同的操作。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation
msgid "pages.Indentation.steps.missing_indentation.program"
msgstr "for character in name:"

#. https://futurecoder.io/course/#Indentation
#.     # __code1__:
#.     for character in name:
#.         print(character)
#.     # __code0__:
#.     for character in name: print(character)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.character
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.Indentation.steps.missing_indentation.text"
msgstr "这个示例循环："

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.one_indented_line.text"
msgstr "有两行缩进，因此它们都是主体的一部分，因此`---`在每个字符后打印。现在尝试运行相同的代码，但最后一行没有缩进："

#. https://futurecoder.io/course/#Indentation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Indentation.steps.two_indented_lines.text"
msgstr "空格是必需的，以告诉Python哪些代码行属于for循环的主体。当循环包含多行时，这一点至关重要，循环通常会这样做。例如，运行这段代码："

#. https://futurecoder.io/course/#Indentation
msgid "pages.Indentation.title"
msgstr "缩进"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.0.text"
msgstr "`input()` 总是返回一个字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.1.text"
msgstr "看起来像数字的字符串仍然是字符串，而不是数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.2.text"
msgstr "在 `super_secret_number = 7` 中，`7` 是一个数字，而不是字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.3.text"
msgstr "这使得 `super_secret_number` 也是一个数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.4.text"
msgstr "字符串不能等于数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.5.text"
msgstr "要检查两个值是否相等，首先确保它们是相同的类型。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.6.text"
msgstr "所以要比较一个数字和一个字符串，首先将数字转换为字符串或将字符串转换为数字。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.7.text"
msgstr "你在上一页学会了如何在字符串和数字之间转换。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
msgid ""
"pages.InteractiveProgramsWithInput.steps.convert_input_to_int.hints.8.text"
msgstr "使用 `int()` 转换为整数（整数）或使用 `str()` 转换为字符串。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Amazing%21+Are+you+psychic%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Nope%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22What+number+am+I+thinking+of%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text"
msgstr "你输入的内容（不包括最后按下 Enter）作为字符串从 `input()` 函数返回。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     if int(guess) == super_secret_number:
#.     # __code1__:
#.     if guess == str(super_secret_number):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.guess
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.super_secret_number
msgid "pages.InteractiveProgramsWithInput.steps.final_text.text"
msgstr "完美！"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.InteractiveProgramsWithInput.steps.first_input.text"
msgstr "到目前为止，我们编写的程序不是交互式的。"

#. https://futurecoder.io/course/#InteractiveProgramsWithInput
msgid "pages.InteractiveProgramsWithInput.title"
msgstr "使用 `input()` 的交互式程序"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.0.text"
msgstr "如果你有类似 `x < 0 and x > 100` 的表达式，你就走错了方向。这对于 *任何* 值的 `x` 都会是 `False`！"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.1.text"
msgstr "使用 `and` 的解决方案在多个方面与使用 `or` 的解决方案不同。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.2.text"
msgstr "我们使用 `or` 的解决方案首先判断 `x` 是否是无效的百分比，否则得出有效性。使用 `and` 会反向进行这个判断。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.3.text"
msgstr "你需要相应地反转 `return` 语句。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
msgid "pages.IntroducingAnd.steps.AndExercise.hints.4.text"
msgstr "你还需要更改比较运算符。"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
msgid "pages.IntroducingAnd.steps.AndExercise.text"
msgstr "现在让我们练习一下。之前我们使用 `or` 编写了一个函数 `is_valid_percentage`。这是一个示例解决方案："

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.FalseAndFalse.text"
msgstr "最后，尝试："

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.0.text"
msgstr "列表将始终有 3 个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.1.text"
msgstr "这意味着你不需要使用循环。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.2.text"
msgstr "记住，你可以使用 `row[0]` 获取第一个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.3.text"
msgstr "第一个元素、第二个元素和第三个元素都需要相等。"

#. https://futurecoder.io/course/#IntroducingAnd
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.hints.4.text"
msgstr "这意味着第一个元素应该等于第二个元素，同时也等于第三个元素。"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code5__:
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#.     # __code0__:
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#.     # __code1__:
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#.     # __code4__:
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#.     # __code2__:
#.     a < b and b < c
#.     # __code3__:
#.     a < b < c
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.TicTacToeWinningRow.text"
msgstr "太棒了！这是一个可能的解决方案："

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndFalse.text"
msgstr "好的，现在尝试："

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.steps.TrueAndTrue.text"
msgstr "Python 中的另一个布尔运算符是 `and`。"

#. https://futurecoder.io/course/#IntroducingAnd
#.     # __code0__:
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#.     # __code2__:
#.         return row == [row[0], row[0], row[0]]
#.     # __code1__:
#.         return row[0] == row[1] == row[2]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.all_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.IntroducingAnd.steps.final_text.text"
msgstr "干得好。这里有很多可能的正确解决方案："

#. https://futurecoder.io/course/#IntroducingAnd
msgid "pages.IntroducingAnd.title"
msgstr "介绍 `and`"

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code3__:
#.     __program_indented__
#.     # __code1__:
#.     (a * b) + (c * d)
#.     # __code2__:
#.     ((a * b) + c) * d
#.     # __code0__:
#.     a * b + c * d
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.birdseye_loop_example.text"
msgstr ""
"虽然其他工具显示代码逐行运行和变量的值，`birdseye` "
"显示程序中每个表达式的值。这让你看到一个复杂表达式是如何分解成更小的子表达式，以及每个子表达式的值是什么。"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.steps.final_text.text"
msgstr "请注意："

#. https://futurecoder.io/course/#IntroducingBirdseye
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingBirdseye.steps.first_birdseye_example.text"
msgstr ""
"你已经见过 `snoop` 和 Python Tutor。futurecoder 还提供了一个最后的工具来分析程序的运行，称为 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingBirdseye
msgid "pages.IntroducingBirdseye.title"
msgstr "使用 `birdseye` 理解程序"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access.special_messages.bad_french_value.text"
msgstr "哎呀，您需要在继续之前设置 `french = {'apple': 'pomme', 'box': 'boite'}`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access.text"
msgstr "`french` 是一个包含两个键值对的字典："

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access2.special_messages.bad_french_value.text"
msgstr "哎呀，您需要在继续之前设置 `french = {'apple': 'pomme', 'box': 'boite'}`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access2.text"
msgstr "这不行，因为字典中项的位置通常不重要。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.requirements"
msgstr "在 shell 中运行与上一步相同的代码（`french['apple']`），但将 `'apple'` 替换为 `'box'`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access3.special_messages.bad_french_value.text"
msgstr "哎呀，您需要在继续之前设置 `french = {'apple': 'pomme', 'box': 'boite'}`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access3.text"
msgstr "这样更好！"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid ""
"pages.IntroducingDictionaries.steps.dict_access4.special_messages.bad_french_value.text"
msgstr "哎呀，您需要在继续之前设置 `french = {'apple': 'pomme', 'box': 'boite'}`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.dict_access4.text"
msgstr "现在您既知道 Python 也知道法语了！"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.steps.final_text.text"
msgstr "对不起，您也不能这样做。您只能查找一个键以获取其值，而不能反过来。"

#. https://futurecoder.io/course/#IntroducingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingDictionaries.steps.first_dict.text"
msgstr "我们已经看到了几种类型：`str`、`int`、`float`、`bool` 和 `list`。"

#. https://futurecoder.io/course/#IntroducingDictionaries
msgid "pages.IntroducingDictionaries.title"
msgstr "引入字典"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingElif.steps.dna_example.text"
msgstr ""
"快速生物学课程！你身体中的大多数细胞都包含你的完整遗传代码在DNA中。这由称为核苷酸的分子单位链组成，分为四种：腺嘌呤、胞嘧啶、鸟嘌呤和胸腺嘧啶，简称为ACGT。因此，单链的一部分可能是这样的："

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.steps.dna_example_with_elif.requirements"
msgstr ""
"从本页第一步复制程序，但将那里的4个`if`块替换为这里的`if`和`elif`块的组合。换句话说，将最后三个`if`中的每一个替换为`elif`，但保留第一个`if`不变。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_elif.text"
msgstr "太棒了！你已经模仿了你自己细胞不断在做的事情。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.0.text"
msgstr "更改："

#. https://futurecoder.io/course/#IntroducingElif
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
msgid "pages.IntroducingElif.steps.dna_example_with_else.hints.1.text"
msgstr "现在对交换G和C的代码做同样的更改。"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
msgid "pages.IntroducingElif.steps.dna_example_with_else.text"
msgstr "哦，亲爱的，这不太奏效。`T`被更改为`A`，但`A`没有被更改为任何东西。你能看出为什么吗？"

#. https://futurecoder.io/course/#IntroducingElif
#.     # __code0__:
#.     if X:
#.         ...
#.     else:
#.         if Y:
#.             ...
#.         else:
#.             if Z:
#.                 ...
#.             else:
#.                 ...
#.     # __code1__:
#.     if X:
#.         ...
#.     elif Y:
#.         ...
#.     elif Z:
#.         ...
#.     else:
#.         ...
msgid "pages.IntroducingElif.steps.final_text.text"
msgstr "当你希望正好有一个多个主体运行时，通常会有一系列`elif`子句，就像在这种情况下。一般来说，像这样的代码："

#. https://futurecoder.io/course/#IntroducingElif
msgid "pages.IntroducingElif.title"
msgstr "介绍`elif`"

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.final_text.text"
msgstr "你可以像正常英语一样阅读代码："

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.steps.first_for_loop.text"
msgstr ""
"好消息！你已经通过了无聊的基础知识。我们可以开始编写一些有趣的程序并享受乐趣。编程中最强大的概念之一是 *循环*，它允许你重复相同的代码。Python "
"有两种循环：`for` 循环和 `while` 循环。下面是一个 for 循环的示例，尝试运行这个程序："

#. https://futurecoder.io/course/#IntroducingForLoops
msgid "pages.IntroducingForLoops.title"
msgstr "引入 For 循环"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.0.text"
msgstr "这就像给定的 f-string 示例一样。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.1.text"
msgstr "你忘记加 `f` 了吗？"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.hints.2.text"
msgstr "你需要多少对大括号？"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.basic_f_string_exercise.text"
msgstr "这失败了，因为我们不能在字符串 `\"Hello Alice. You are \"` 和数字 `age` 之间使用 `+`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.0"
msgstr "\"Hello \" + name + \". You are \" + age + \" years old.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.1"
msgstr "Hello name. You are age years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.2"
msgstr "Hello Alice. You are 20 years old."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
msgid ""
"pages.IntroducingFstrings.steps.concatenate_string_number.output_prediction_choices.3"
msgstr "Hello 'Alice'. You are 20 years old."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingFstrings.steps.concatenate_string_number.text"
msgstr "f-string 的语法以 `f` 开头，后面跟着一个字符串。"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.eval_expr_inside_f_string.text"
msgstr "除了变量，f-string 实际上可以在大括号内包含任何 Python 表达式。"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.final_text.text"
msgstr "很好！"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.0.text"
msgstr "`print` 内部的表达式有四个问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.1.text"
msgstr "找到人数的语法有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.2.text"
msgstr "然后其中一个字符串的引号有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.3.text"
msgstr "还有找到第一个人姓名的语法有问题。"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.4.text"
msgstr "而且你不能将字符串和数字相加！"

#. https://futurecoder.io/course/#IntroducingFstrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
msgid "pages.IntroducingFstrings.steps.fix_broken_program.hints.5.text"
msgstr "你在 f-string 中正确使用了大括号吗？"

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.steps.fix_broken_program.text"
msgstr "如你所见，我们也可以使用双引号定义 f-string，就像定义普通字符串一样。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.0"
msgstr "f\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.1"
msgstr "\"{name} went to {meal} with {friend}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.2"
msgstr "{name} went to {meal} with {friend}."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.3"
msgstr "'name' went to 'meal' with 'friend'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.4"
msgstr "name went to meal with friend."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.5"
msgstr "\"Alice\" went to \"lunch\" with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.6"
msgstr "'Alice' went to 'lunch' with 'Bob'."

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.7"
msgstr "\"Alice went to lunch with Bob.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
msgid ""
"pages.IntroducingFstrings.steps.introduce_f_strings.output_prediction_choices.8"
msgstr "Alice went to lunch with Bob."

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name + " went to " + meal + " with " + friend + '.'
#.     # __code1__:
#.     f"{name} went to {meal} with {friend}."
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.requirements"
msgstr "运行上面的程序，但在 `print()` 内替换这段代码："

#. https://futurecoder.io/course/#IntroducingFstrings
#.     # __code0__:
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#.     # __code1__:
#.     print(f"{name} went to {meal} with {friend}.")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+went+to+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22+with+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22lunch%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22%7Bname%7D+went+to+%7Bmeal%7D+with+%7Bfriend%7D.%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.friend
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.meal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingFstrings.steps.introduce_f_strings.text"
msgstr "到目前为止，我们一直在通过使用 `+` 连接字符串来组合它们，例如："

#. https://futurecoder.io/course/#IntroducingFstrings
msgid "pages.IntroducingFstrings.title"
msgstr "f-strings"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.0.text"
msgstr "你只需要在现有程序中添加几行代码。所有现有代码应保持不变。"

#. https://futurecoder.io/course/#IntroducingIfStatements
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
msgid ""
"pages.IntroducingIfStatements.steps.excited_confused_exercise.hints.1.text"
msgstr "你添加的代码应该与现有代码非常相似。"

#. https://futurecoder.io/course/#IntroducingIfStatements
#.     # __code0__:
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello+World%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.confused
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.excited
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
msgid "pages.IntroducingIfStatements.steps.excited_confused_exercise.text"
msgstr "现在进行一个练习。修改上面的程序以包含一个额外的布尔参数 `confused`，所以程序应该像这样开始："

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.0"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_example.output_prediction_choices.1"
msgstr "你好，世界！"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_example.text"
msgstr "注意第一个 `if` 语句中的代码运行了，但第二个没有。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.0"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
msgid ""
"pages.IntroducingIfStatements.steps.excited_false_example.output_prediction_choices.1"
msgstr "你好，世界！"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.requirements"
msgstr "运行上一步的程序，但将 `True` 替换为 `False`，所以 `excited = False`。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.excited_false_example.text"
msgstr "（记住 `sentence += '!'` 意味着 `sentence = sentence + '!'`）"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.final_text.text"
msgstr "做得好！这个程序可以根据你如何组合 `excited` 和 `confused` 来做 4 件不同的事情。如果你想的话，可以尝试一下。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.first_if_statements.text"
msgstr "布尔值用于 *if 语句* 中（有时也称为 *条件语句*）。"

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.steps.introducing_booleans.text"
msgstr ""
"现在我们要学习如何告诉计算机做出决策，并仅在特定条件下运行代码。为此，我们需要一种新的值类型。你已经见过数字和字符串，现在认识 "
"*布尔值*。只有两个布尔值：`True` 和 `False`。试试这个程序："

#. https://futurecoder.io/course/#IntroducingIfStatements
msgid "pages.IntroducingIfStatements.title"
msgstr "引入 If 语句"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.can_contain_anything.text"
msgstr ""
"列表是一个 *序列*（一个有序的集合/容器），可以包含任意数量的值。值通常被称为 "
"*元素*。它们可以是任何东西：数字、字符串、布尔值，甚至是列表！它们也可以是类型的混合。"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.final_text.text"
msgstr "恭喜！这非常棘手！一种解决方案看起来像这样："

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.first_list
msgid "pages.IntroducingLists.steps.first_list.program"
msgstr "words = ['This', 'is', 'a', 'list']"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.first_list.text"
msgstr "现在是学习一种强大的新类型值 *列表* 的时候了。这里有一个示例："

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.numbers_sum.text"
msgstr "正如你在上面看到的，列表是 *可迭代的*，这意味着你可以用 `for loop` 遍历它们。这里有一个程序可以将列表中的所有数字相加："

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.0.text"
msgstr "这与您之前逐个字符构建字符串的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.1.text"
msgstr "解决方案与添加数字的程序非常相似。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.2.text"
msgstr "事实上，如果你尝试用字符串列表运行那个程序，会发生什么？"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.3.text"
msgstr "问题是 0。你不能将 0 加到字符串上，因为数字和字符串是不兼容的。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
msgid "pages.IntroducingLists.steps.strings_sum.hints.4.text"
msgstr "在字符串中是否有类似于 0 的概念？一个空的初始值？"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum.text"
msgstr "现在修改程序，使其可以将字符串列表相加，而不是数字。例如，给定："

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.0.text"
msgstr "这与之前的练习相似。你可以从那个解决方案开始。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.1.text"
msgstr "这个练习不需要任何花哨的东西，最终的解决方案可以非常简单。但要正确实现它很棘手，你需要仔细考虑方法。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.10.text"
msgstr "你 *可以* 编写一个程序来检查你是否在循环的 *第一次* 迭代中。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.11.text"
msgstr "只需创建一个布尔变量来跟踪这一点。无需任何比较运算符或数字。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.12.text"
msgstr "我们在 [这里](#UnderstandingProgramsWithSnoop) 看过类似的程序。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.13.text"
msgstr "所以如果你只在第一次迭代中跳过添加分隔符，你将会有 `n - 1` 个分隔符。现在你只需要仔细考虑如何确保分隔符在正确的位置。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.14.text"
msgstr "暂时忘记循环，你需要按照以下顺序将以下内容添加到字符串中：第一个单词，分隔符，第二个单词，分隔符，第三个单词，等等。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.15.text"
msgstr ""
"这意味着在第一次迭代中，你只需添加第一个单词。在第二次迭代中，你添加分隔符，然后是第二个单词。在第三次迭代中，你添加分隔符，然后是第三个单词。依此类推。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.16.text"
msgstr "因此在你的循环内部，先添加分隔符，然后再添加单词。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.17.text"
msgstr "通过检查布尔变量跳过在第一次迭代中添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.18.text"
msgstr "在循环之前创建布尔变量，然后在循环内更改它。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.19.text"
msgstr "只在循环中检查后更改它，否则你将无法跳过第一次迭代。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.2.text"
msgstr "在每次迭代中，除了列表中的一个单词外，你还必须添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.3.text"
msgstr "但你不想在添加列表中的最后一个单词后添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.4.text"
msgstr "不幸的是，字符串没有“减法”；你不能添加最后一个分隔符然后将其移除。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.5.text"
msgstr "让我们回顾一下。最终结果应该包含每个单词，以及 `n - 1` 个分隔符，其中 `n` 是单词的数量。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.6.text"
msgstr "所以你希望在每次迭代中添加一个分隔符，除了一个。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.7.text"
msgstr "你可以使用 `if` 语句跳过在某个特定迭代中添加分隔符。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.8.text"
msgstr "稍后你将学习一种方法来遍历列表并检查你是否在最后一次迭代中，但现在你没有办法做到这一点。"

#. https://futurecoder.io/course/#IntroducingLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
msgid "pages.IntroducingLists.steps.strings_sum_bonus.hints.9.text"
msgstr "然而，你跳过的迭代不必是最后一次！"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.steps.strings_sum_bonus.text"
msgstr "很好！"

#. https://futurecoder.io/course/#IntroducingLists
msgid "pages.IntroducingLists.title"
msgstr "介绍列表"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting.requirements"
msgstr "运行 `print(strings[1][0])` 或类似的代码，使用 `birdseye` 查看它是如何工作的。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     string = strings[1]
#.     print(string[0])
#.     # __code1__:
#.     print(strings[1][0])
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.double_subscripting.text"
msgstr "你可能是这样解决的："

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.1.text"
msgstr "你还记得如何访问列表的最后一个位置（不使用 `len`）吗？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.2.text"
msgstr "同样，你如何访问列表中的倒数第二个位置？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.3.text"
msgstr "如果你记不起来，可以用 Google 搜索一下！"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.4.text"
msgstr "索引在列表和字符串上工作方式相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.5.text"
msgstr "你是否遇到了 `index out of range` 错误？是字符串的问题，还是列表的问题？为什么？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.6.text"
msgstr "确保你没有混淆列表索引和字符串索引的顺序。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
msgid ""
"pages.IntroducingNestedLists.steps.double_subscripting_exercise.hints.7.text"
msgstr "如果你遇到问题，请使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.double_subscripting_exercise.text"
msgstr "使用这种语法，修改程序以打印列表 `strings` 中倒数第二个字符串的最后一个字母。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings[1].append("today?")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22today%3F%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.final_text.text"
msgstr "很好！你现在非常了解嵌套下标。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.0"
msgstr "hello"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.1"
msgstr "there"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.10"
msgstr "a"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.2"
msgstr "how"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.3"
msgstr "are"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.4"
msgstr "you"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.5"
msgstr "['hello', 'there']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.6"
msgstr "['how', 'are', 'you']"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.7"
msgstr "h"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.8"
msgstr "t"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid ""
"pages.IntroducingNestedLists.steps.first_nested_list_example.output_prediction_choices.9"
msgstr "e"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.first_nested_list_example
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.program"
msgstr "strings = [['hello', 'there'], ['how', 'are', 'you']]"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.first_nested_list_example.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.0.text"
msgstr "如何访问列表中的第二个字符串？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.1.text"
msgstr "那么如何访问字符串中的特定字母？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.hints.2.text"
msgstr "记住，列表和字符串的索引是非常相似的。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.IntroducingNestedLists.steps.string_list_exercise.text"
msgstr "练习：给定一个字符串列表，打印列表中第二个字符串的第一个字母。例如，给定："

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.1.text"
msgstr "你需要使用多少次下标？"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.2.text"
msgstr "首先你需要访问一个子列表。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.3.text"
msgstr "然后访问该子列表中的一个字符串。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.4.text"
msgstr "然后访问该字符串中的一个字母。"

#. https://futurecoder.io/course/#IntroducingNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.hints.5.text"
msgstr "如果你遇到问题，请使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.steps.triple_subscripting.text"
msgstr "正如你所看到的，Python 允许我们拥有 *嵌套列表*：一个每个元素都是另一个列表的列表（我们称之为 *子列表*）。"

#. https://futurecoder.io/course/#IntroducingNestedLists
msgid "pages.IntroducingNestedLists.title"
msgstr "介绍嵌套列表"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.0.text"
msgstr "想想你如何手动和系统地用铅笔和纸来做这个。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.1.text"
msgstr "密码必须是四个字母长这一点非常重要。如果密码可以是任何给定的长度，这将更难解决。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.2.text"
msgstr "但是字符串 `letters` 可能有任意数量的字符。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.3.text"
msgstr ""
"如果有 `n` 个不同的字母，那么可能的密码数量是 `n^4 == n*n*n*n`，因为每个位置都有 `n` 个可能的字母，并且它们都是独立的。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.4.text"
msgstr ""
"再假设 `letters = \"ABCD\"`。想象一下你有所有可能的三字母密码。现在对于每一个，添加一个 A 在末尾，或者添加一个 B，或者 "
"C，或者 D。这就是你如何获得所有可能的四字母密码。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.5.text"
msgstr "记住，一个 for 循环可以包含任何语句，包括另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.6.text"
msgstr "这适用于所有的 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.7.text"
msgstr "一个 for 循环嵌套在另一个 for 循环中已经不够了。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.crack_password_exercise.hints.8.text"
msgstr "你必须更深入。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     letters = "ABCD"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ABCD%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.letters
msgid "pages.IntroducingNestedLoops.steps.crack_password_exercise.text"
msgstr "在下一个练习中，你需要破解一个密码。你知道它正好是四个字母长，并且只有几个字母是可能的，这些你已经写下来了："

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayers%5Bi%5D%7D+vs+%7Bplayers%5Bj%5D%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.final_text.text"
msgstr "太好了！解决方案如下："

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.first_nested_loop.text"
msgstr ""
"你已经看到 `if` 或循环的缩进主体可以包含任何类型的语句，包括更多的 `if` 语句和循环。特别是一个循环可以包含另一个循环。这里有一个例子："

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.0.text"
msgstr "你需要像之前一样在一个 for 循环内再嵌套一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.1.text"
msgstr "这次像 `for player1 in players:` 这样的写法是不够的。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.10.text"
msgstr "你需要使用比较运算符。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.11.text"
msgstr "一旦你弄清楚了关系，你可以用 `if` 语句来表达它。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.2.text"
msgstr "你的程序需要使用列表中玩家的 *位置*。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.3.text"
msgstr "这意味着你需要遍历位置并使用索引（下标）来访问列表条目。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.4.text"
msgstr "要遍历位置，使用 `range`..."

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.5.text"
msgstr "...和 `len`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.6.text"
msgstr "看看期望的输出：`Charlie vs Alice`：`Charlie` 在 `players` 列表中排在 `Alice` 前面。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.7.text"
msgstr "我们不想打印 `Alice vs Charlie`，因为 `Alice` 在 `players` 中排在 `Charlie` 后面。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.8.text"
msgstr "我们只想打印那些左侧玩家在列表中排在右侧玩家之前的对。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.hints.9.text"
msgstr "我们如何用两个 for 循环的列表索引来表达这种关系？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Dylan%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text"
msgstr "哇，你也是个艺术家！"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.0.text"
msgstr "想想你如何手动和系统地用铅笔和纸来做这个。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.1.text"
msgstr "你需要在一个 for 循环内再嵌套一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.player_vs_player_exercise.hints.2.text"
msgstr "你需要一个 `if` 语句来检查两个玩家不是同一个人。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     players = ["Alice", "Bob", "Charlie"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.players
msgid "pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text"
msgstr "完美！"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.0.text"
msgstr "你需要在一个 for 循环内再嵌套一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.1.text"
msgstr "你需要从 1 到 12 的数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.2.text"
msgstr "每当你需要一系列连续的数字时，使用 `range`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.3.text"
msgstr "你想要类似 `for x in range(n):` 的东西。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.4.text"
msgstr "这将从 `x = 0` 开始，但有一个简单的解决方法。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.5.text"
msgstr "你可以直接在 `x` 上加 1。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.6.text"
msgstr "使用 `*` 来乘以数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.7.text"
msgstr "使用一个包含多个变量的 f-string。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.8.text"
msgstr "记得在每个部分后打印一行正确数量的破折号。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.hints.9.text"
msgstr "确保每一行在正确的循环中，并且有正确的缩进量。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.added_str_and_int.text"
msgstr "你不能将字符串和数字相加。使用 f-string。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.adding_one_in_wrong_loop.text"
msgstr "你在错误的位置将 1 加到了外部循环变量上！你应该在哪里做这个来修复它？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.too_long.text"
msgstr "你的解决方案太长了。你只需要几行代码来解决这个问题。使用嵌套循环，这样你就不需要重复自己。计算机会为你处理重复！"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.messages.used_times_instead_of_x.text"
msgstr ""
"这几乎是正确的！确保在你的表中显示正确的字符 `x`。例如，你的解决方案应该显示 `3 x 4 = 12` 而不是 `3 * 4 = 12`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid ""
"pages.IntroducingNestedLoops.steps.times_table_exercise.special_messages.multiply_with_x.text"
msgstr "要乘以数字，使用 `*`"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.steps.times_table_exercise.text"
msgstr ""
"确保你完全理解发生了什么。`print(letter)` 和 `print('---')` 每次运行 3 次，因为它们的缩进将它们放在 *外部循环* "
"中。`print(f'{letter} {number}')` 被调用 3 × 4 = 12 次，因为它在 *内部循环* `for number in "
"range(4):` 中，该循环有 4 次迭代，但它本身在外部循环中，因此运行 3 次。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.0.text"
msgstr "你会如何描述手动输入这个三角形的指令？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.1.text"
msgstr ""
"打印一行 `size` 个加号，然后是 `size - 1` 个加号，依此类推直到 1 个加号。例如打印 5 个 `+`，然后 4 个 `+`，然后 "
"3，2 和 1。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.2.text"
msgstr "将其分解为子问题。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.3.text"
msgstr "如何打印给定长度的一行 `+`，以及如何遍历所有长度？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.4.text"
msgstr "构建一行字符应该是你在之前的练习中非常熟悉的，唯一的区别是你必须使其具有给定长度，而不是仅仅与另一个字符串的长度相同。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.5.text"
msgstr "一种简单的方法是循环 `n` 次，使用 `range(n)`。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.6.text"
msgstr "你需要在一个 for 循环内使用另一个 for 循环。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.7.text"
msgstr ""
"你需要倒计时的数字，比如 5, 4, 3, 2, 1。有一种方法可以使用 `range` "
"来实现，你可以轻松查找，但也可以使用普通的范围并进行一些非常简单的数学运算，将计数向上的数字转换为计数向下的数字。"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
msgid ""
"pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.hints.8.text"
msgstr "什么公式将 0 转换为 5，1 转换为 4，2 转换为 3，等等？"

#. https://futurecoder.io/course/#IntroducingNestedLoops
#.     # __code0__:
#.     size = 5
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
msgid "pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text"
msgstr "哇，你现在基本上是个黑客了！"

#. https://futurecoder.io/course/#IntroducingNestedLoops
msgid "pages.IntroducingNestedLoops.title"
msgstr "引入嵌套循环"

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.IntroducingNot.text"
msgstr ""
"与其他两个布尔运算符 `and` 和 `or` 不同，它们用于两个布尔值之间（称为 *二元* 运算符），`not` 仅在一个布尔值之前使用（称为 "
"*一元* 运算符）。它否定所应用的表达式，有点像负号。尝试在 shell 中："

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.steps.NotFalse.text"
msgstr "现在尝试以下内容："

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.0.text"
msgstr "如果你被要求简化这个相关但相反的函数呢？"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.1.text"
msgstr "在这种情况下，有一个标准的简化技巧可以应用，我们在几页前讨论过。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.2.text"
msgstr ""
"特别是 `returns` 是多余的，因为 `filename.endswith(\".png\") or "
"filename.endswith(\".jpg\")` 已经是所需的布尔值。"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.valid_image
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.3.text"
msgstr "所以你可以直接写："

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.4.text"
msgstr "对于真实的练习，你可以做类似的事情。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.5.text"
msgstr "真实练习中的区别是结果是反转的。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.6.text"
msgstr "也就是说，当 `valid_image` 返回 `False` 时，`invalid_image` 返回 `True`，反之亦然。"

#. https://futurecoder.io/course/#IntroducingNotPage
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
msgid "pages.IntroducingNotPage.steps.NotPriority.hints.7.text"
msgstr "记得 `not` 的作用吗？"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code7__:
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#.     # __code6__:
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#.     # __code1__:
#.     (not True) or True
#.     # __code2__:
#.     not (True or True)
#.     # __code0__:
#.     not True or True
#.     # __code4__:
#.     (-1) + 2
#.     # __code5__:
#.     -(1 + 2)
#.     # __code3__:
#.     -1 + 2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22I+can%27t+process+%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22cat.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22dog.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22invoice.pdf%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.NotPriority.text"
msgstr "你可以在 `birdseye` 中看到"

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingNotPage.steps.NotTrueOrTrue.text"
msgstr "`not` 相对于 `and` 和 `or` 的优先级是什么？在 `birdseye` 中尝试以下内容："

#. https://futurecoder.io/course/#IntroducingNotPage
#.     # __code0__:
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
#.     # __code1__:
#.     if x:
#.         return False
#.     else:
#.         return True
#.     # __code2__:
#.     return not x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.jpg%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22.png%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.filename
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.invalid_image
msgid "pages.IntroducingNotPage.steps.final_text.text"
msgstr "干得好！这里有两个有效的解决方案："

#. https://futurecoder.io/course/#IntroducingNotPage
msgid "pages.IntroducingNotPage.title"
msgstr "介绍 `not`"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.requirements"
msgstr "运行上一步的程序，但将："

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     return name == "Alice" or name == "Bob"
#.     # __code1__:
#.     return name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ACommonMistake.text"
msgstr "请仔细注意我们是如何写条件的："

msgid "pages.IntroducingOr.steps.AnExercise.disallowed.3.label"
msgstr "比较链"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.0.text"
msgstr "请记住，您可以使用比较运算符 `<, >, <=, >=, ==` 来生成布尔值。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.1.text"
msgstr "您需要检查 `x` 与 0 的比较以及与 100 的比较。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.2.text"
msgstr "您需要使用 `or` 将两个比较合并为一个布尔值。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.3.text"
msgstr "在上面，我们使用了一个技巧，使整个函数体只是 `return <comparison> or <comparison>`。但在这里行不通！"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.4.text"
msgstr "您需要使用 `if` 语句。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.5.text"
msgstr "您需要有一个 `return False` 和一个 `return True`。"

#. https://futurecoder.io/course/#IntroducingOr
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
msgid "pages.IntroducingOr.steps.AnExercise.hints.6.text"
msgstr ""
"如果您有类似 `x >= 0 or x <= 100` 的东西，您就走错了方向。这对 *任何* 值的 `x` 都将为真。毕竟，101 大于 0！"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code4__:
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#.     # __code3__:
#.     return name in ["Alice", "Bob", "Charlie"]
#.     # __code2__:
#.     (name == "Alice") or ("Bob")
#.     # __code1__:
#.     name == ("Alice" or "Bob")
#.     # __code0__:
#.     name == "Alice" or "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Charlie%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.is_valid_percentage
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.AnExercise.text"
msgstr "当我们用 `birdseye` 检查它时，我们可以看到："

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.FalseOrFalse.text"
msgstr "最后，尝试："

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#.     # __code1__:
#.     return name == "Alice" or name == "Bob"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.requirements"
msgstr "运行上一步的程序，但将："

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code1__:
#.     if x:
#.         return True
#.     else:
#.         return False
#.     # __code0__:
#.     name == "Alice" or name == "Bob"
#.     # __code2__:
#.     return x
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.FurtherImprovement.text"
msgstr "我们可以做得更好。注意到"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.ImprovingWithOr.requirements"
msgstr "从页面顶部复制程序，然后将函数的前四行更改为使用 `or`，如建议的那样。"

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     # __code1__:
#.     if name == "Alice" or name == "Bob":
#.         return True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Alice%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Bob%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid "pages.IntroducingOr.steps.ImprovingWithOr.text"
msgstr "在编辑器中，将："

#. https://futurecoder.io/course/#IntroducingOr
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.IntroducingOr.steps.InputAliceBob.text"
msgstr "我们在介绍 If 语句时学习了 *布尔值*（`True` 和 `False`）。"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.requirements"
msgstr "运行与上一步相同的代码，但使用 `birdseye`。"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.InspectWithBirdseye.text"
msgstr "第二个和第三个测试失败了！我们的函数似乎做错了："

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrFalse.text"
msgstr "好的，现在尝试："

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.TrueOrTrue.text"
msgstr "让我们看看是否可以做得更好。"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#IntroducingOr
msgid "pages.IntroducingOr.title"
msgstr "介绍 `or`"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.final_text.text"
msgstr "shell 只是简单地返回相同的内容，因为没有进一步的计算。`'hello'` 只是等于 `'hello'`。"

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.steps.hello_string.text"
msgstr ""
"Python 让你做的事情远不止计算。实际上，我们一段时间内不会接触数字或数学。相反，我们将关注 *字符串*。字符串本质上是文本片段。例如，在 "
"shell 中输入以下内容，包括引号 (`'`)："

#. https://futurecoder.io/course/#IntroducingStrings
msgid "pages.IntroducingStrings.title"
msgstr "介绍字符串"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.final_text.text"
msgstr "太棒了！继续尝试。当你准备好时，点击“下一步”继续。"

#. https://futurecoder.io/course/#IntroducingTheShell
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTheShell.steps.first_expression
msgid ""
"pages.IntroducingTheShell.steps.first_expression.messages.anything_else.text"
msgstr "很棒，你正在尝试自己的实验！这是一个很好的迹象。继续保持。只是想让你知道，你最终需要输入 `1+2` 才能继续进行。"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.first_expression.text"
msgstr "右侧是 *shell*。这是运行小段 Python 代码的地方。只需输入一些代码，按下回车，它就会运行！现在试试："

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.requirements"
msgstr "在 shell 中运行类似 `1 + 2` 的代码，但用 `*`、`/` 或 `-` 代替 `+`。"

#. https://futurecoder.io/course/#IntroducingTheShell
#.     # __code0__:
#.     3 * 4
msgid ""
"pages.IntroducingTheShell.steps.more_calculation.special_messages.multiply_with_x.text"
msgstr "我看到一个 'x'。如果你想要乘法，请使用星号，例如："

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.steps.more_calculation.text"
msgstr "很好！Python 计算了 `1+2` 并得到了结果 `3`，所以 shell 显示了这个结果。"

#. https://futurecoder.io/course/#IntroducingTheShell
msgid "pages.IntroducingTheShell.title"
msgstr "介绍 Shell"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.0.text"
msgstr "你可以先模仿上面的 `row_winner`，然后修改它以使其适用于列。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.1.text"
msgstr "你不能像遍历 `board` 的行那样简单地遍历列。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.10.text"
msgstr "为每一列定义一个布尔值，然后在内部循环中相应地更新它。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.11.text"
msgstr "其余的逻辑与 `row_winner` 非常相似。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.12.text"
msgstr "注意 `' '`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.13.text"
msgstr "如果需要，请记得在最后返回 `False`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.2.text"
msgstr "嵌套列表的列 *是什么*？第一列由第一行的第一个元素、第二行的第一个元素等组成。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.3.text"
msgstr "遍历所有列意味着查看每一行的第一个元素，然后是每一行的第二个元素，依此类推。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.4.text"
msgstr "所以你需要先遍历表示位置的数字，第一、第二等。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.5.text"
msgstr "你如何找到 `board` 中的列数？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.6.text"
msgstr "这涵盖了外部循环，它遍历每一列。然后你需要一个内部循环来遍历列中的每个元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.7.text"
msgstr "列的不同条目不在同一行。那么你如何访问它们？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.8.text"
msgstr "你可以遍历棋盘的行，找到与该行和当前列对应的元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.hints.9.text"
msgstr "要访问第 5 列的所有条目，你可以遍历所有行，并访问每一行的第 5 个元素。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
msgid "pages.IntroducingTicTacToe.steps.column_winner.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.0.text"
msgstr "在任意大小的方形棋盘上有多少条对角线？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.1.text"
msgstr "即使棋盘的大小改变，对角线的数量也保持不变！"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.10.text"
msgstr "你可以使用一个循环同时检查两个对角线。或者你可以为每个对角线使用一个循环。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.2.text"
msgstr ""
"这次你不能像 `middle == board[0][0] and middle == board[2][2]` 这样做，因为你不知道对角线有多长。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.3.text"
msgstr "此外，两个对角线可能没有像 `middle` 这样的共同点。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.4.text"
msgstr "首先，关注从左上到右下的对角线。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.5.text"
msgstr "你如何通过双下标访问这些条目？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.6.text"
msgstr "你在这些双下标中看到模式了吗？拿一些纸和笔，尝试在一些例子上计算一下。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.7.text"
msgstr "现在关注另一个对角线（从右上到左下）。在下标中又有一个模式，但它稍微复杂一些。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.8.text"
msgstr "你还记得负索引吗？这可能会在这里有所帮助。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.hints.9.text"
msgstr "一旦你掌握了这些模式，使用之前的相同思路检查所有条目是否相等。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code1__:
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#.     # __code0__:
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.middle
msgid "pages.IntroducingTicTacToe.steps.diagonal_winner.text"
msgstr "很好！这很有挑战性。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.0.text"
msgstr "你需要检查棋盘上的每一行，所以你需要一个循环来实现。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.1.text"
msgstr "你如何检查一行中的所有条目是否彼此相等？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.10.text"
msgstr "如果没有获胜的行，请确保返回 `False`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.2.text"
msgstr "这是一个独立的问题。你可以先忘记整个棋盘，只检查一行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.3.text"
msgstr "你甚至可以写一个仅执行此操作的函数，尽管你不必这样做。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.4.text"
msgstr "由于行的大小可能不同，你需要遍历整个行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.5.text"
msgstr "对于每一行，定义一个布尔值。然后遍历该行，相应地更新布尔值。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.6.text"
msgstr "你可以使用行中的第一个条目 `row[0]` 来与所有行条目进行比较。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.7.text"
msgstr "仔细考虑布尔值的初始值应该是什么，以及在什么条件下你应该更改它的值。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.8.text"
msgstr "在遍历一行后，如果你确定所有条目都相等，则返回 `True`（提前结束外部循环）。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.hints.9.text"
msgstr "确保你不会因为一行全是空格而返回 `True`。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
msgid ""
"pages.IntroducingTicTacToe.steps.intro_row_winner.messages.catch_empty_row.text"
msgstr "请记住，有些条目可能是 `' '`。空行不是获胜行。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code2__:
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     # __code1__:
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#.     # __code0__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
msgid "pages.IntroducingTicTacToe.steps.intro_row_winner.text"
msgstr ""
"你已经完成了许多短小的练习，解决了一个个小问题。现在我们将处理一个更大、更复杂的项目，这将真正考验你的知识，并需要将许多较小的部分结合在一起。"

msgid "pages.IntroducingTicTacToe.steps.winner.disallowed.0.message"
msgstr "你的解决方案应该通过调用这三个函数来工作。`winner` 本身不应该进行任何循环、下标等操作。它应该非常简短。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.0.text"
msgstr "解决方案非常简短！只需正确使用这三个函数。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.1.text"
msgstr "考虑可能的情况。当 `winner(board)` 返回 `False` 时？当它返回 `True` 时？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
msgid "pages.IntroducingTicTacToe.steps.winner.hints.2.text"
msgstr "你如何将这三个函数和一个布尔运算符结合起来以获得所需的结果？"

#. https://futurecoder.io/course/#IntroducingTicTacToe
#.     # __code0__:
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.entry
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.piece
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.IntroducingTicTacToe.steps.winner.text"
msgstr "太棒了！这相当困难。"

#. https://futurecoder.io/course/#IntroducingTicTacToe
msgid "pages.IntroducingTicTacToe.title"
msgstr "检查棋盘上的获胜者"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.final_text.text"
msgstr ""
"答案是 `sunshine` 看起来像一个变量，因此 Python 尝试查找它的值，但由于我们从未定义过这个名称的变量，所以我们得到了一个错误。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.0"
msgstr "sunshine"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.1"
msgstr "'sunshine'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.2"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
msgid ""
"pages.IntroducingVariables.steps.sunshine_undefined_check.output_prediction_choices.3"
msgstr "'你好'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.sunshine_undefined_check.text"
msgstr ""
"正如你所看到的，引号使一切变得不同。`'word'` 字面上只是 `'word'`，因此它在技术上被称为 *字符串字面量*。另一方面，`word` "
"是一个变量，其值可以是任何东西。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_assign.text"
msgstr "要制作有趣的程序，我们不能总是操作相同的值。我们需要一种方法来引用那些事先未知且可以变化的值 - 可以变化的值。这些被称为 *变量*。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid ""
"pages.IntroducingVariables.steps.word_check.special_messages.bad_word.text"
msgstr "哎呀，你需要在继续之前设置 `word = 'Hello'`。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_check.text"
msgstr "这创建了一个名为 `word` 的变量，引用字符串值 `'Hello'`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.0"
msgstr "word"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.1"
msgstr "'word'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.2"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
msgid ""
"pages.IntroducingVariables.steps.word_string_check.output_prediction_choices.3"
msgstr "'你好'"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.steps.word_string_check.text"
msgstr "好的。为了比较，在 shell 中单独运行 `__program__`，带上引号。"

#. https://futurecoder.io/course/#IntroducingVariables
msgid "pages.IntroducingVariables.title"
msgstr "介绍变量"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.final_text.text"
msgstr "你已经掌握了嵌套列表以及如何将它们与嵌套循环结合起来。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.0.text"
msgstr "这与之前的练习非常相似。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.1.text"
msgstr "你应该什么时候打印布尔值？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.2.text"
msgstr "记住你只想打印一次。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.3.text"
msgstr "不要为每个子列表定义一个布尔值，只为整个列表定义一个布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.list_contains_word_exercise.hints.4.text"
msgstr "你应该什么时候以及如何修改布尔值？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Python%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text"
msgstr "做得好！"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.requirements"
msgstr "运行一个由上述两个部分组合而成的单一程序。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor.text"
msgstr "现在在 Python Tutor 中再次运行相同的程序。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.requirements"
msgstr "运行一个由上述两个部分组合而成的单一程序。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code1__:
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#.     # __code0__:
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.num
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sublist
msgid ""
"pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text"
msgstr "你可以使用嵌套循环来遍历嵌套列表的每个元素和子元素。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.0.text"
msgstr "如何检查一个字符串是否包含一个单词？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.1.text"
msgstr "确保检查 **字符串** 是否包含该单词，而不是子列表。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.2.text"
msgstr "如何访问嵌套列表中每个子列表的每个字符串？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.3.text"
msgstr "你需要使用嵌套循环。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.string_contains_word_exercise.hints.4.text"
msgstr "循环应遵循页面开头示例的相同模式。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text"
msgstr "现在让我们使用这种循环解决一些问题。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.0.text"
msgstr "对于每个子列表，定义一个布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.1.text"
msgstr "遍历子列表，相应地更新布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.2.text"
msgstr "每个子列表只打印一次布尔值。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.3.text"
msgstr "布尔值的初始值应该是什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.4.text"
msgstr "如果其中一个子列表为空呢？你应该为该子列表打印什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.5.text"
msgstr "如果你在一个字符串中找到了单词，布尔值应该设置为 `True`。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.6.text"
msgstr "如果一个字符串不包含该单词怎么办？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.7.text"
msgstr "没关系！这并不改变其他字符串是否可能包含该单词。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.hints.8.text"
msgstr "换句话说，除了在开始时，不要将布尔值设置为 `False`。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#.     # __code1__:
#.     False
#.     True
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22goodbye+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+there%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22hello+world%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22how+are+you%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text"
msgstr "不错！"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.0.text"
msgstr "由于字符串的长度可能不同，这有点棘手。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.1.text"
msgstr "这次你的外部循环应该持续多久？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.2.text"
msgstr "在处理字符串之前，先找出最长字符串的长度可能是个好主意。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.3.text"
msgstr "剩下的与之前的练习非常相似。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.hints.4.text"
msgstr "唯一的区别是现在你必须确定是从字符串中添加一个字母，还是添加一个空格。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise.text"
msgstr "很好！如果你愿意，你现在可以继续到 [下一页](#DefiningFunctions)。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.0.text"
msgstr "这与本页之前的练习没有相似之处。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.1.text"
msgstr "想想当只有两个字符串时的解决方案。你如何将其推广到字符串列表？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.2.text"
msgstr "你需要遍历第一个字母，然后是第二个字母，依此类推。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.3.text"
msgstr "你必须使用一个循环，但循环应该持续多久？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.4.text"
msgstr "记住列表中的字符串长度是相等的。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.5.text"
msgstr "对于每个位置（第一个、第二个等）定义一个新的字符串。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.6.text"
msgstr "那个字符串最初应该是什么？"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.7.text"
msgstr "对于每个位置（第一个、第二个等），你必须遍历列表中的每个字符串。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
msgid ""
"pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.hints.8.text"
msgstr "你需要在你已有的循环内部再加一个循环。"

#. https://futurecoder.io/course/#LoopingOverNestedLists
#.     # __code0__:
#.     strings = ["abc", "def", "ghi"]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22abc%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22def%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22ghi%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
msgid "pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text"
msgstr "很好！"

#. https://futurecoder.io/course/#LoopingOverNestedLists
msgid "pages.LoopingOverNestedLists.title"
msgstr "遍历嵌套列表"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code2__:
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#.     # __code0__:
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#.     # __code1__:
#.     board.append(row.copy())
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cube
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_cube
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.test
msgid "pages.MakingTheBoard.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.0.text"
msgstr "现有代码几乎是正确的。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.1.text"
msgstr "有几种方法可以解决这个问题。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.2.text"
msgstr "一些解决方案涉及添加一些小东西。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.3.text"
msgstr "您还可以在不添加或删除任何内容（除了空格）的情况下重新排列代码。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.4.text"
msgstr "问题在于单个列表 `row` 被多次使用。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.5.text"
msgstr "因此，一种解决方案是创建 `row` 的副本，这些副本都是独立的。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.6.text"
msgstr "另一种解决方案是每次从头开始创建一个新的 `row`。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.7.text"
msgstr "在 Python 中，有几种方法可以用少量代码复制列表。"

#. https://futurecoder.io/course/#MakingTheBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
msgid "pages.MakingTheBoard.steps.fix_make_board.hints.8.text"
msgstr "每次创建新行可以通过简单地重新排列代码来完成。"

#. https://futurecoder.io/course/#MakingTheBoard
msgid ""
"pages.MakingTheBoard.steps.fix_make_board.special_messages.not_separate.text"
msgstr "然而，结果中的子列表并不是所有独立的对象。"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code4__:
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#.     # __code1__:
#.     board = [row, row, row]
#.     # __code2__:
#.     board[0][0] = 'X'
#.     # __code3__:
#.     row[0] = 'X'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.MakingTheBoard.steps.fix_make_board.text"
msgstr "你能看出发生了什么吗？"

#. https://futurecoder.io/course/#MakingTheBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MakingTheBoard.steps.naive_make_board.text"
msgstr "到目前为止，棋盘已经作为嵌套列表提供给您。"

#. https://futurecoder.io/course/#MakingTheBoard
msgid "pages.MakingTheBoard.title"
msgstr "制作棋盘"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.final_text.text"
msgstr "重申一下，***在迭代时绝不要修改任何东西***。你的选择是："

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code1__:
#.     for number in numbers.copy():
#.     # __code0__:
#.     for number in numbers:
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.requirements"
msgstr "运行与上面相同的程序，但更改第二行："

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     for number in numbers.copy():
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.ModifyingWhileIterating.steps.make_copy.text"
msgstr "但事实证明，这几乎做了同样的事情 - 它不会导致错误，但仍然不会删除 7 或 3。"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_copy2.text"
msgstr "现在被修改的列表和被迭代的列表是独立的对象，即使它们最开始的内容相同。"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.make_new_list.text"
msgstr "或者你可以从头开始构建一个新列表。在这种情况下，我们在一个练习中已经做过类似的事情："

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.steps.remove_instead_of_pop.text"
msgstr "在运行时，它显然跳过了查看 7 或 3，并且没有删除它们，最后在尝试访问一个过高的索引时失败。你能看出这是为什么吗？"

#. https://futurecoder.io/course/#ModifyingWhileIterating
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text"
msgstr "考虑这个程序。它遍历一个数字列表，并移除小于 10 的数字。或者至少，它试图这么做。"

#. https://futurecoder.io/course/#ModifyingWhileIterating
msgid "pages.ModifyingWhileIterating.title"
msgstr "在迭代时修改"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = [15, 12, -6, 3]`，`y = ` 后面跟着从列表中精确复制的一行，以及 `print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.1.text"
msgstr "如果你不确定，可以查一下如何计算平均值/均值。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.2.text"
msgstr "要计算 `x` 中数字的平均值，我们需要两个东西。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.3.text"
msgstr "哪两个函数/方法可以给你这两个东西？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.hints.4.text"
msgstr "你如何将这两个东西结合起来计算平均值？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` 替换为从上面的长列表中精确复制的一行。中间的行仍然应该以 `y ="
" ` 开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.average_exercise.text"
msgstr "很棒的工作！在下一个练习中，从这个不完整的程序开始："

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = ['a', 'b', 'c']`，`y = ` 后面跟着从列表中精确复制的一行，以及 `print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.1.text"
msgstr "什么时候 `1 in x` 为真？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.2.text"
msgstr "当 `1` 在 `x` 中时！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.3.text"
msgstr "`1` 可能在 `x` 中出现一次、两次或三次..."

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.hints.4.text"
msgstr "...但不能出现零次！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.requirements"
msgstr ""
"复制上面的三行，然后将 `1 in x` 替换为从上面的长列表中精确复制的一行。中间的行仍然应该以 `y = ` 开头。你选择的行应该与 `1 in "
"x` 有相同的效果，以便程序打印 `True`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(len(x))
#.     sum(range(x))
#.     sum(range(len(x)))
#.     sum(len(range(x)))
#.     sum(range(x)) + 1
#.     sum(range(x + 1))
#.     sum(x) / len(x)
#.     sum(x) / range(x)
#.     sum(x) / range(len(x))
#.     sum(x) / len(range(x))
#.     sorted(x)[1]
#.     sorted(x)[2]
#.     sorted(x)[-1]
#.     sorted(x)[-2]
#.     x.count(1) >= 0
#.     x.count(1) > 0
#.     x.count(1) > 1
#.     # __code1__:
#.     x = [1, 2, 0, 3]
#.     y = 1 in x
#.     print(y)
msgid "pages.MoreListFunctionsAndMethods.steps.count_in_sorted_sum.text"
msgstr ""
"你可能会认出这些来自你的练习。我向你保证，那些练习并不是毫无意义的，因为你现在已经学到了宝贵的基本技能。例如，你可以使用 `in` 来检查列表是否包含 "
"5，但没有同样简单的方法来检查一个大于 5 的数字。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     some_list.count(value)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text"
msgstr "**`count`**：使用以下语法返回参数在列表中出现的次数"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.steps.final_text.text"
msgstr "恭喜你！你现在已经成为列表方法和函数的高手！"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     value in some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value
msgid "pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text"
msgstr "**`in`**：一个比较运算符，用于检查一个值是否在列表中，使用以下语法"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.0.text"
msgstr ""
"你的解决方案应该有正好三条语句：`x = [12, -6, 2, -1, 3]`，`y = ` 后面跟着从列表中精确复制的一行，以及 "
"`print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.1.text"
msgstr "`x` 中的数字似乎都是乱的。你能做点什么吗？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.2.text"
msgstr "如果你弄明白了那部分，试着在 shell 中使用那个函数来玩玩。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.3.text"
msgstr "你如何使用那个函数来获取列表中的最小值？那最大的呢？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.hints.4.text"
msgstr "在那之后，如何得到 *第二* 小的值？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` 替换为从上面的长列表中精确复制的一行。中间的行仍然应该以 `y ="
" ` 开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid ""
"pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text"
msgstr "很好。最后一个："

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sorted(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text"
msgstr "这里有一些更有用的函数/方法。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     sum(some_list)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.some_list
msgid "pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text"
msgstr "**`sum`**：使用以下语法对一组数字进行求和"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.0.text"
msgstr "你的解决方案应该有正好三条语句：`x = 100`，`y = ` 后面跟着从列表中精确复制的一行，以及 `print(y)`。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.1.text"
msgstr "什么函数/方法可以用来加总东西？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.2.text"
msgstr "哪个函数/方法给我们数字 `1, 2, 3, ..., x`？"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.hints.3.text"
msgstr "你必须做一个小调整，否则最后一个数字 `x` 会被遗漏。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid ""
"pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.requirements"
msgstr ""
"复制上面的三行，然后将 `(insert_one_line_from_above)` 替换为从上面的长列表中精确复制的一行。中间的行仍然应该以 `y ="
" ` 开头。"

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
#.     # __code0__:
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.insert_one_line_from_above
msgid "pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text"
msgstr "干得好！在下一个练习中，从这个不完整的程序开始："

#. https://futurecoder.io/course/#MoreListFunctionsAndMethods
msgid "pages.MoreListFunctionsAndMethods.title"
msgstr "更多列表函数和方法"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.requirements"
msgstr "运行与上一步相同的代码，但将函数的最后一行（`return letter`）替换为仅`break`。"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.break_vs_return.text"
msgstr "和之前一样，`return` ***停止整个函数***，包括所有循环。"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     if condition:
#.         return value1
#.     else:
#.         return value2
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.condition
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.value2
msgid "pages.MoreOnReturn.steps.cannot_return_multiple_values.text"
msgstr "一旦执行了`return`语句，函数将停止，剩余的代码将被忽略。"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MoreOnReturn.steps.double_return_in_one_function.text"
msgstr "有时`return`可能会让新学习者感到困惑和犯错。"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.steps.final_text.text"
msgstr "与`return`不同，`break`仅停止其使用的最内层循环，在这种情况下是`for number in range(3):`。"

#. https://futurecoder.io/course/#MoreOnReturn
#.     # __code0__:
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#.     # __code1__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double_numbers
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.doubles
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.numbers
msgid "pages.MoreOnReturn.steps.return_ends_whole_function.text"
msgstr "起初，在`for`循环中为每次迭代`return`一个值可能看起来很直观。"

#. https://futurecoder.io/course/#MoreOnReturn
msgid "pages.MoreOnReturn.title"
msgstr "`return`结束函数调用"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.final_text.text"
msgstr "所以如果你遇到神秘的 `SyntaxError`，请确保你没有错误地拆分任何行！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.invalid_multiline
msgid "pages.MultiLineExpressions.steps.invalid_multiline.program"
msgstr "is_friend = name == \"Alice\" or"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.steps.invalid_multiline.text"
msgstr ""
"我们的代码行开始变得相当长。幸运的是，Python 提供了几种方法可以将一个语句分散到多行，但这不是自动的。你必须确保 Python "
"理解你正在做的事情。例如，这段代码是无效的语法，会给你一个错误："

#. https://futurecoder.io/course/#MultiLineExpressions
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.MultiLineExpressions.steps.valid_multiline.text"
msgstr "Python 尝试将其解释为两行独立的代码，并感到困惑。你需要告诉它第一行正在继续到第二行。"

#. https://futurecoder.io/course/#MultiLineExpressions
msgid "pages.MultiLineExpressions.title"
msgstr "多行语句"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.steps.final_text.text"
msgstr ""
"这里有一个提示：通常你会想要重新运行之前输入的代码，或者它的稍微修改版本。你可以复制和粘贴，但这很繁琐，并且妨碍实验。更好的方法是按下键盘上的上箭头键。这将把之前的代码行插入到shell中。继续按它可以回到更早的历史，如果你回得太远，按下下箭头键可以回到另一边。现在试试这个。"

#. https://futurecoder.io/course/#NavigatingShellHistory
msgid "pages.NavigatingShellHistory.title"
msgstr "导航 Shell 历史"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.final_text.text"
msgstr "太棒了！你快要将所有内容整合在一起了，继续加油！"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.modify_list_in_function.text"
msgstr "我们已经看到如何从用户获取输入，现在让我们用这些输入在棋盘上放置棋子并进行游戏。首先，试试这段代码："

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.0.text"
msgstr "你的函数需要调用 `input()` 两次。输入不会作为参数传递给 `play_move`。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.1.text"
msgstr "`input()` 总是返回一个字符串。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.10.text"
msgstr "一旦你得到了两个数字，你需要用它们修改嵌套列表 `board`。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.11.text"
msgstr "这段代码在上面已经给你展示过了。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.12.text"
msgstr "你只需要使用用户输入的数字，而不是硬编码的 1 和 0。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.13.text"
msgstr "你可以在一行中使用嵌套下标，或者分两步进行。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.2.text"
msgstr "看起来像数字的字符串仍然是字符串，而不是数字。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.3.text"
msgstr "列表索引必须是数字，而不是字符串。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.4.text"
msgstr "如果棋盘是 3x3，用户可能会为每个坐标输入 1、2 或 3。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.5.text"
msgstr "长度为 3 的列表的有效索引是什么？"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.6.text"
msgstr "你需要将输入的 1、2 或 3 转换为 0、1 或 2。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.7.text"
msgstr "你还需要能够处理更大的棋盘，比如 9x9 或更大。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.8.text"
msgstr "你不能用字符串做数学运算，只能用数字。"

#. https://futurecoder.io/course/#NestedListAssignment
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
msgid "pages.NestedListAssignment.steps.nested_assignment_input.hints.9.text"
msgstr "你如何将字符串转换为数字？"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.steps.nested_assignment_input.requirements"
msgstr "你的函数应该修改 `board` 参数。它不需要 `return` 或 `print` 任何东西。"

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code3__:
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#.     # __code0__:
#.     row = board[1]
#.     row[0] = player
#.     # __code1__:
#.     board[1][0] = player
#.     # __code2__:
#.     2
#.     1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnO+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5CnX+to+play%3A%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NestedListAssignment.steps.nested_assignment_input.text"
msgstr "这两行："

#. https://futurecoder.io/course/#NestedListAssignment
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NestedListAssignment.steps.nested_assignment_two_lines.text"
msgstr "注意调用 `play_move(game_board, 'X')` 实际上是直接 *修改* `game_board`。"

#. https://futurecoder.io/course/#NestedListAssignment
msgid "pages.NestedListAssignment.title"
msgstr "嵌套列表作业：在棋盘上进行移动"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.discovering_newline.special_messages.bad_string.text"
msgstr "哎呀，`string` 的值不正确。请再次运行上一步的程序。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.discovering_newline.text"
msgstr "太好了！一个 *三重引号字符串* 可以跨越多行，并且它们将在输出中显示。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.steps.final_text.text"
msgstr "干得好！这相当具有挑战性。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.0.text"
msgstr "有两种类型的行需要显示：一种类型是用 `|` 连接的棋子，另一种类型是用 `-` 连接的 `+`。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.1.text"
msgstr "这两种类型的行都可以通过适当地使用 `join` 来构建。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.10.text"
msgstr "然后将 `join` 应用到该列表上，以 `+-` 行作为分隔符。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.11.text"
msgstr "要正确地将换行符添加到 `+-` 行中，请查看我们提供的测试用例。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.2.text"
msgstr "例如，如何使用 `join` 将一行 `['X', 'O', 'X']` 转换为 `'X|O|X'`？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.3.text"
msgstr "同样，如何使用 `join` 获得 `'-+-+-'`？应该将 `join` 应用到哪个列表上？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.4.text"
msgstr "一旦你弄清楚如何构建这两种类型的行，如何将它们组合以获得最终结果？"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.5.text"
msgstr "请注意，带有 `+-` 符号的行始终是相同的。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.6.text"
msgstr "并且每对连续的棋子行之间都有一行 `+-` 分隔。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.7.text"
msgstr "你可以在行本身上使用 `join`！"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.8.text"
msgstr "带有棋子的行可以用 `+-` 行连接在一起（在适当的位置添加换行符）。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
msgid ""
"pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.hints.9.text"
msgstr "为此，首先你需要在构建行时将带有棋子的行存储在一个列表中。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#.     # __code3__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#.     # __code1__:
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#.     # __code2__:
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%5Cn%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27X%7CO%7CX%5Cn-%2B-%2B-%5CnO%7C+%7C+%5Cn-%2B-%2B-%5Cn+%7CX%7CO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.char
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.joined_rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
msgid "pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text"
msgstr "很好！一个典型的解决方案看起来像："

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.0.text"
msgstr "仔细查看我们提供的测试用例。它展示了你所需的一切！"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.1.text"
msgstr "你需要为整个棋盘构建一个字符串。从一个空字符串开始。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.2.text"
msgstr "对于每一行，将该行的字符添加到字符串中。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.3.text"
msgstr "你需要一个嵌套循环。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.4.text"
msgstr "当你到达一行的末尾时，你需要在下一行之前添加一个换行符。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.5.text"
msgstr "`'\\n'` 就像任何其他字符一样！你可以像往常一样用 `+` 添加它。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.6.text"
msgstr "请注意，最后一行的结尾与其他行不同。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.7.text"
msgstr "在添加换行符之前，你需要检查它是否是最后一行。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.8.text"
msgstr "你的外部循环应该循环遍历棋盘的长度。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.hints.9.text"
msgstr "然后检查你是否在最后一个索引上。"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27XOX%5CnO++%5Cn+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.NewlinesAndFormatBoard.steps.format_board_simple.text"
msgstr "现在使用换行符来编写函数 `format_board`（你的解决方案应该适用于任何大小的方形 `board`）："

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.introducing_newline.text"
msgstr "这是秘密！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.program"
msgstr "assert_equal("

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code1__:
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#.     # __code0__:
#.     assert_equal(print_board([...]), "...")
#.     # __code2__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_board
msgid "pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text"
msgstr "这是一个好的开始，但理想情况下我们希望有一个 *返回* 字符串的函数，而不是打印它。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.program"
msgstr "string = \"\"\"第一行"

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid ""
"pages.NewlinesAndFormatBoard.steps.multi_line_strings_triple_quotes.text"
msgstr "通常，字符串字面量必须在一行上，因此这是无效的："

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text"
msgstr "接下来我们要解决显示井字棋棋盘的问题。这是一个解决方法："

#. https://futurecoder.io/course/#NewlinesAndFormatBoard
msgid "pages.NewlinesAndFormatBoard.title"
msgstr "换行符，`format_board`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.OtherComparisonOperators.steps.brokn_kyboard.text"
msgstr "这是一个使用 `!=` 的可爱小程序："

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.0.text"
msgstr "这几乎与前一步完全相同，只需使用字符串而不是数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.1.text"
msgstr "你只需要在 shell 中运行一行非常简单的小代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.2.text"
msgstr "你也可以通过在 shell 中运行多行代码来做到这一点，首先定义变量，然后比较它们，但你并不需要这样做，这可以在没有变量的情况下完成。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.3.text"
msgstr "还记得在课程开始时在 shell 中添加两个字符串吗？"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.4.text"
msgstr "例如，我们做了 `'hello' + 'world'`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.comparing_strings
msgid "pages.OtherComparisonOperators.steps.comparing_strings.hints.5.text"
msgstr "对于这个练习，你基本上需要做这个，但要比较它们。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.requirements"
msgstr "使用 `<` 或 `>` 在两个字符串上运行任何代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.comparing_strings.text"
msgstr "你也可以使用这些运算符来比较字符串。如果你将两个字符串按字母顺序排列，第一个字符串是“少于”第二个字符串。自己看看。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#.     # __code1__:
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#.     # __code2__:
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Bob%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Charlie%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.first
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.final_text.text"
msgstr "太棒了！"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.grades_example.text"
msgstr "这是一个实际的 `<` 使用示例，供你尝试："

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.0.text"
msgstr "你只需要在 shell 中运行一行非常简单的小代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.1.text"
msgstr "你如何在 shell 中添加两个数字？"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.2.text"
msgstr "例如，尝试 `123 + 456`"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.introducing_less_than
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.hints.3.text"
msgstr "对于这个练习，你基本上需要做这个，但要比较它们。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid ""
"pages.OtherComparisonOperators.steps.introducing_less_than.requirements"
msgstr "使用 `<` 或 `>` 在两个数字上运行任何代码。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.introducing_less_than.text"
msgstr ""
"其他方便的运算符是 `<`（小于）和 `>`（大于）。例如，`a < b` 意味着 \"`a` 小于 `b`\"。尝试在 shell "
"中使用其中一个来比较两个数字。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.0.text"
msgstr "尝试编写一个程序，打印 `x1` 和 `x2` 中的最小值。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.hints.1.text"
msgstr "你只需要几次使用 `<`、`if`，也许还有 `else`。"

#. https://futurecoder.io/course/#OtherComparisonOperators
#.     # __code0__:
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.x3
msgid "pages.OtherComparisonOperators.steps.min_three_exercise.text"
msgstr "现在进行一个练习：编写一个程序，接受三个变量 `x1`、`x2` 和 `x3`，并打印最小值。因此，对于："

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.steps.try_not_equals.text"
msgstr ""
"等于运算符 `==` 的相反是 *不等于* 运算符 `!=`。如果你眯着眼睛看，它有点像 ≠。当两个值不相等时，它的结果为 `True`。在 shell"
" 中尝试 `__program__`。"

#. https://futurecoder.io/course/#OtherComparisonOperators
msgid "pages.OtherComparisonOperators.title"
msgstr "其他比较运算符"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#.     # __code0__:
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.ReturningValuesFromFunctions.steps.final_text.text"
msgstr "做得好！这里有两个可能的解决方案："

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.first_return.text"
msgstr "当函数*返回*值而不仅仅是打印它们时，函数特别有用。试试这个例子："

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.losing_return_value.text"
msgstr "在这里，我们将 `number`（其值为 `5`）作为参数 `x` 传递给函数 `double`，而 `double` *返回了*"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.0.text"
msgstr "要乘以 4，先乘以 2 两次。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.1.text"
msgstr "这意味着你需要调用 `double` 两次。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.10.text"
msgstr "查看 `double` 的定义以获取示例。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.11.text"
msgstr "确保你不要在 `quadruple` 的函数体内调用 `quadruple`。检查你的缩进。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.2.text"
msgstr "确保你每次都使用 `double` 返回的值。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.3.text"
msgstr "确保你有函数定义的所有部分。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.4.text"
msgstr "这包括 `def`、`()` 和 `:`。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.5.text"
msgstr "确保你的函数名为 `quadruple`。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.6.text"
msgstr "确保它在括号 `()` 中接受一个名为 `x` 的参数。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.7.text"
msgstr "在函数体内使用该参数。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.8.text"
msgstr "确保函数体是缩进的。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.hints.9.text"
msgstr "确保你在最后`return`某个值。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.messages.used_multiply.text"
msgstr "你不能在 `quadruple` 内部使用 `*`、`+` 或者任何数字。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid ""
"pages.ReturningValuesFromFunctions.steps.quadruple_exercise.requirements"
msgstr "编写一个程序，定义一个名为 `quadruple` 的函数，如上所述。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.steps.quadruple_exercise.text"
msgstr "在这里 `double(number)` 仍然返回了 `10`，但我们没有利用它，所以它被丢失了。`number` 仍然是 `5`。"

#. https://futurecoder.io/course/#ReturningValuesFromFunctions
msgid "pages.ReturningValuesFromFunctions.title"
msgstr "从函数返回值"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.0.text"
msgstr "你应该如何定义字符串？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.1.text"
msgstr "用单引号，还是用双引号？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.2.text"
msgstr "你只需要一个字符串。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.hints.3.text"
msgstr "不需要将字符串连接在一起。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise.text"
msgstr "正如你所看到的，Python 将由单引号或双引号定义的相同字符串视为相同。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.double_quotes.text"
msgstr "所以我们不能在单引号的字符串中随意使用撇号。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.final_text.text"
msgstr "干得好！"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal.text"
msgstr "记住，引号只是字符串的人类表示的一部分。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.0.text"
msgstr "想简单点！你通常会怎么做？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.1.text"
msgstr "如果一个字符串包含单引号，我们必须使用双引号来定义它。"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.hints.2.text"
msgstr "如果字符串包含双引号怎么办？"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise.text"
msgstr "很好！"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.program"
msgstr "print('Alice's Diner')"

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
#.     # __code0__:
#.     name = 'Alice'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Alice%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.name
msgid ""
"pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text"
msgstr "到目前为止，我们一直在使用单引号定义字符串，例如："

#. https://futurecoder.io/course/#SingleAndDoubleQuotesInStrings
msgid "pages.SingleAndDoubleQuotesInStrings.title"
msgstr "字符串中的单引号和双引号"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.steps.final_text.text"
msgstr ""
"与自动更新公式的电子表格不同，像 `sentence` 这样的变量不会记住它是如何计算的，如果基础值 `word` 或 `name` "
"被更改，它也不会改变。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.0"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.1"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.output_prediction_choices.2"
msgstr "再见，世界"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.requirements"
msgstr "运行一个包含前一步的四行代码和这里的两行代码的程序。"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     word = 'Goodbye'
#.     print(sentence)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Goodbye%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sentence
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text"
msgstr ""
"现在 `sentence` 的值是 `'Hello World'`，可以多次使用。请注意，它将继续保持这个值，直到被直接重新赋值，例如用另一个语句 "
"`sentence = <something>`。例如，将这两行添加到程序的末尾："

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.0"
msgstr "sentence"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.1"
msgstr "word + ' ' + name"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.2"
msgstr "Hello + ' ' + World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.3"
msgstr "'Hello' + ' ' + 'World'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.4"
msgstr "你好，世界"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.output_prediction_choices.5"
msgstr "'你好，世界'"

#. https://futurecoder.io/course/#StoringCalculationsInVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text"
msgstr "通常，您会使用变量来存储计算结果。这将有助于构建更复杂的程序。例如，尝试这个程序："

#. https://futurecoder.io/course/#StoringCalculationsInVariables
msgid "pages.StoringCalculationsInVariables.title"
msgstr "在变量中存储计算"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     if word.lower() == 'yes':
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27yes%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.final_text.text"
msgstr "请注意，`sentence.upper()` 不会改变原始的 `sentence`。"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text"
msgstr ""
"这两个方法也像在列表上工作一样在字符串上工作。`index` 返回搜索词 `'the'` 在更长字符串 `'feed the dog and the "
"cat'` 中的 *起始索引*，即 `5`。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index
msgid ""
"pages.StringMethodsUnderstandingMutation.steps.string_count_index.program"
msgstr "string = 'feed the dog and the cat'"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_count_index.text"
msgstr ""
"`in` 在字符串上像在列表上一样工作！该命令返回 `True`，因为 `the` 在 `feed the dog and the cat` 中作为 "
"*子字符串* 出现。`count` 和 `index` 呢？"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.program"
msgstr "print('the' in 'feed the dog and the cat')"

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.StringMethodsUnderstandingMutation.steps.string_in_step.text"
msgstr ""
"您已经看到 `len` "
"和下标在字符串上工作，有点像字符串是字符的列表。字符串还支持我们学到的一些新方法，不仅适用于字符，还适用于任何子字符串。例如，尝试以下内容："

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
#.     # __code1__:
#.     __program_indented__
#.     # __code0__:
#.     word.lower()
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text"
msgstr "您根本无法改变字符串 - 您只能创建新字符串并使用它们。这意味着这本身是一个无用的语句："

#. https://futurecoder.io/course/#StringMethodsUnderstandingMutation
msgid "pages.StringMethodsUnderstandingMutation.title"
msgstr "字符串方法与不可变性"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.0.text"
msgstr "`string` 应该被一个空格和 `level` 个感叹号 (`!`) 包围。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.1.text"
msgstr "在你的程序中包含之前的 `surround` 定义，并在 `alert` 中调用它。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.10.text"
msgstr "想想你如何使用 `+=` 来构建字符串。反复更新同一个变量，构建你的结果。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.11.text"
msgstr "也就是说，在你的循环中写 `something = surround(something, '!')`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.12.text"
msgstr "确保你在 `alert` 的末尾 `return` 一些内容。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.13.text"
msgstr "确保你不要在循环内 `return`，而是在循环之后。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.14.text"
msgstr "确保你不要在 `alert` 的函数体内调用 `alert`。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.2.text"
msgstr "使用 `surround` 来处理空格。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.3.text"
msgstr "使用 `surround` 来处理感叹号。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.4.text"
msgstr "你不能将多个感叹号合并为一个字符串，所以要多次调用 `surround`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.5.text"
msgstr "也就是说，对于每一对感叹号调用一次 `surround`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.6.text"
msgstr "所以多次调用 `surround(..., '!')`。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.7.text"
msgstr "使用循环多次调用它。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.8.text"
msgstr "使用 `range(n)` 使你的循环有 `n` 次迭代。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.hints.9.text"
msgstr "确保你使用 `surround` 的返回值。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid ""
"pages.TestingFunctions.steps.alert_exercise.messages.catch_return_inside_loop.text"
msgstr ""
"在 `alert` 函数中，你将 `return` 语句放在了错误的位置！注意你在 `alert` 中的缩进。你可能过早地用 `return` "
"结束了一个循环。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
msgid "pages.TestingFunctions.steps.alert_exercise.messages.used_format.text"
msgstr "你不能在 `alert` 中使用字符串连接/格式化/插值/乘法或 f-strings。你必须调用 `surround` 来解决这个问题。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#.     # __code1__:
#.     def alert(string, level):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21%21%21+DANGER+%21%21%21%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%21%21+Warning+%21%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22DANGER%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22Warning%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.alert
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.level
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
msgid "pages.TestingFunctions.steps.alert_exercise.text"
msgstr "完美！现在写一个函数 `alert`，使其通过这些测试："

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.requirements"
msgstr "在上面的程序中输入代码。然后通过向每个 `assert_equal` 调用添加一个参数来更改最后两行，以使测试通过。不要触碰函数定义。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.double
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quadruple
msgid "pages.TestingFunctions.steps.complete_quadruple_tests.text"
msgstr "很好！我们的测试失败了！当然，这通常不是一件好事，但它告诉我们测试正在发挥作用。它们将确保我们对 `double` 的实现是正确的。"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.final_text.text"
msgstr "干得好！这些工具在接下来的章节中将非常有用。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22OK%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.actual
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%22Error%21+%7Brepr%28actual%29%7D+%21%3D+%7Brepr%28expected%29%7D%22
msgid "pages.TestingFunctions.steps.introducing_assert_equal.text"
msgstr ""
"编写程序的重要部分是测试它们是否正确工作。你可以手动进行测试，例如通过检查 `print(double(5))` 是否打印 "
"`10`，但这种事情很快就会变得乏味。实际上编写测试你程序的程序是很有帮助的。这被称为 *自动化测试*，这些程序被称为 *测试*。"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.requirements"
msgstr "运行上一步的程序，但将 `x * 2` 替换为 `x * 3`。保持其余部分不变。"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.steps.make_tests_fail.text"
msgstr "OK 表示测试通过。我们的 `double` 函数似乎工作正常。将其更改为返回 `x * 3`，看看会发生什么。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.0.text"
msgstr "参数 `sides` 应该在 `string` 之前和之后添加。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.1.text"
msgstr "使用字符串连接来做到这一点。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.2.text"
msgstr "确保主体有缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.3.text"
msgstr "确保你在最后 `return` 一些内容。"

#. https://futurecoder.io/course/#TestingFunctions
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
msgid "pages.TestingFunctions.steps.surround_exercise.hints.4.text"
msgstr "确保你不要在 `surround` 的函数体内调用 `surround`。检查你的缩进。"

#. https://futurecoder.io/course/#TestingFunctions
#.     # __code0__:
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#.     # __code1__:
#.     def surround(string, sides):
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%2B%2Bmore%2B%2B%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22%3Dthe+same%3D%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22more%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22the+same%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.sides
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.surround
msgid "pages.TestingFunctions.steps.surround_exercise.text"
msgstr "测试的另一个有用之处在于，任何人都可以阅读它们并看到函数所做的清晰而明确的例子。当一个函数复杂且难以用英语描述时，这非常有帮助。"

#. https://futurecoder.io/course/#TestingFunctions
msgid "pages.TestingFunctions.title"
msgstr "测试函数"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.equality_vs_assignment
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.program"
msgstr "print(1 + 2 = 3)"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.requirements"
msgstr "运行上一步的程序，但将任何 `==` 替换为 `=`。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.equality_vs_assignment.text"
msgstr "如你所见，如果值相等，则相等表达式的结果为 `True`，否则为 `False`。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.final_text.text"
msgstr "做得好！"

#. https://futurecoder.io/course/#TheEqualityOperator
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.TheEqualityOperator.steps.if_equals_replacing_characters.text"
msgstr "让我们在 `if` 语句中使用 `==`。在这个程序中，只有当 `c` 是字符 `'s'` 时，`if` 体才会运行。自己看看吧。"

#. https://futurecoder.io/course/#TheEqualityOperator
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.hints.0.text"
msgstr "你只需要添加几行与现有代码非常相似的代码。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid ""
"pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise.text"
msgstr "现在扩展程序，使其还将 `e` 替换为 `3`，将 `a` 替换为 `@`。"

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.steps.introducing_equality.text"
msgstr ""
"有几种方法可以获得布尔值而不直接赋值，这使你能够构造非常有用的 `if` 语句。特别是，有许多 *比较运算符* "
"用于比较两个表达式的值。最常见的是相等运算符，它检查两个值是否相等。它由两个等号表示：`==`。尝试运行这个："

#. https://futurecoder.io/course/#TheEqualityOperator
msgid "pages.TheEqualityOperator.title"
msgstr "相等运算符"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.steps.final_text.text"
msgstr "### ***恭喜！！！***"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.0.text"
msgstr ""
"你应该在某处使用所有的函数 `winner`、`format_board`（不包括在 `play_move` "
"中的使用）、`play_move`、`make_board`、`print_winner` 和 `print_draw`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.1.text"
msgstr "你只需要在代码中提到每个函数一次，尽管其中一些函数在程序运行时会被调用多次。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.10.text"
msgstr "无论调用哪个函数，它必须被调用一次且仅一次。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.11.text"
msgstr "确保不多次调用一个函数的一个简单方法是将其放在任何循环之外调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.12.text"
msgstr "我们学习了两种使循环停止的方法。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.13.text"
msgstr "一种方法是 `break`，它专门结束一个循环，而不再继续。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.14.text"
msgstr "第二种方法不仅结束循环，还结束整个函数调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.15.text"
msgstr "第二种方法是 `return`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.16.text"
msgstr ""
"不要像示例代码中那样成对地进行移动，例如 `play_move(board, player1)` 和 `play_move(board, "
"player2)`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.17.text"
msgstr "相反，每次循环迭代应该进行一次移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.18.text"
msgstr "你需要一个变量来跟踪轮到哪个玩家。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.19.text"
msgstr "每次循环迭代时应该切换玩家。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.2.text"
msgstr "你需要一个 for 循环来重复进行移动。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.20.text"
msgstr "`if` 语句是实现这一点的好方法。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.21.text"
msgstr "特别是与 `else` 结合使用时。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.22.text"
msgstr "确保 `player1` 先进行第一步。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.23.text"
msgstr "只有在用 `if` 语句检查 `winner` 后才调用 `print_winner`。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.24.text"
msgstr "你需要在循环内部检查赢家，因为你不知道哪个玩家可能会获胜。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.25.text"
msgstr "一旦调用了 `print_winner`，你可以使用 `return` 来结束函数。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.26.text"
msgstr "只用 `return` 本身就可以，`play_game` 不需要返回一个值。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.27.text"
msgstr "在检查赢家后，不要使用 `else` 来调用 `print_draw`，如果没有赢家的话。仅仅因为还没有人获胜并不意味着已经平局。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.28.text"
msgstr "`print_draw` 只应该在所有移动都已进行且仍然没有赢家的情况下被调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.29.text"
msgstr "所以它应该在循环之后被调用，而不是在循环内部。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.3.text"
msgstr "你不需要检查棋盘是否已填满，因为你总是可以计算填满棋盘需要多少步。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.30.text"
msgstr "检查缩进以确保 `print_draw` 不在 for 循环的主体内。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.4.text"
msgstr "因此，你可以使用一个将运行固定次数的循环，并在循环内部检查是否需要提前结束循环。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.5.text"
msgstr "在 3x3 棋盘上最多可以进行多少步？4x4 呢？"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.6.text"
msgstr "在 `range` 上的循环是以固定次数迭代的简单方法。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.7.text"
msgstr "因此，你可以使用 `for _ in range(N):` 最多进行 `N` 步。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.8.text"
msgstr "一旦有赢家，你需要结束循环和游戏。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.hints.9.text"
msgstr "应该调用 `print_winner` 或 `print_draw`，而不是两者都调用。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
#.     # __code0__:
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%22It%27s+a+draw%21%22
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board_size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.col
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.column_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%5Cn++%7B%22%2B%22.join%28%22-%22+%2A+size%29%7D%5Cn%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bi+%2B+1%7D+%7B%22%7C%22.join%28row%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+to+play%3A%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27%7Bplayer%7D+wins%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.f%27++%7B%22+%22.join%28str%28i+%2B+1%29+for+i+in+range%28size%29%29%7D%5Cn%7Bline.join%28rows%29%7D%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.line
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.main_diagonal_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.make_board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_game
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.play_move
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player1
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.player2
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_draw
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.print_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.row_winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.rows
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.size
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.strings
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winner
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.winning_line
msgid "pages.TheFullTicTacToeGame.steps.the_full_game.text"
msgstr "是时候把所有东西放在一起了！下面是一些代码以供开始。"

#. https://futurecoder.io/course/#TheFullTicTacToeGame
msgid "pages.TheFullTicTacToeGame.title"
msgstr "完整的井字棋游戏"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.check_type_manually.text"
msgstr "Python 首先报告 `type('Hello World')` 是 `<class 'str'>`。现在不用担心 `class`。"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.common_type_errors.text"
msgstr "如果在 `str` 和 `int` 之间使用运算符会发生什么？在 shell 中尝试："

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.different_types_look_same.text"
msgstr "不同类型的值通常彼此相差很大，但在打印时可能看起来相同，"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.steps.final_text.text"
msgstr "很好！"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.five_different_types.text"
msgstr "到目前为止，我们已经看到了各种数据类型：字符串、列表、数字和布尔值。"

msgid ""
"pages.Types.steps.fixing_type_errors_with_conversion.disallowed.0.label"
msgstr "f-strings"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.0.text"
msgstr "这段代码在哪些地方出现了问题？"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.1.text"
msgstr "有些值需要转换为不同的类型。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.2.text"
msgstr "具体来说，有一个 `str` 需要转换为 `int`。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
msgid "pages.Types.steps.fixing_type_errors_with_conversion.hints.3.text"
msgstr "还有一个 `int` 需要转换为 `str`。"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Go%21%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Starting...+%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.number
msgid "pages.Types.steps.fixing_type_errors_with_conversion.text"
msgstr "在 `range` 中使用字符串而不是整数，例如 `range('5')`，"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.0.text"
msgstr "您可以从使用您之前的 `format_board` 解决方案中的想法开始。强烈建议使用 `join`！"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.1.text"
msgstr "第一行必须与其余部分分开处理。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.2.text"
msgstr "请记住，`range` 以这种方式产生数字：0, 1, 2, ..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.3.text"
msgstr "我们希望第一行的数字像这样：1, 2, 3..."

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.4.text"
msgstr "每个数字在添加到第一行之前必须转换为字符串！"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.5.text"
msgstr "对于棋盘本身的行，做类似的事情。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.6.text"
msgstr "从仅包含您上面构建的第一行的列表开始。"

#. https://futurecoder.io/course/#Types
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
msgid "pages.Types.steps.format_board_with_numbers.hints.7.text"
msgstr "将每一行的字符串添加到列表中，然后用换行符连接列表。"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27+123%5Cn1XOX%5Cn2O++%5Cn3+XO%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.board
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.format_board
msgid "pages.Types.steps.format_board_with_numbers.text"
msgstr "编写一个改进版的 `format_board`，使其具有行和列编号，如下所示："

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_has_two_meanings.text"
msgstr "对于两个整数，`+` 作为加法运算，而对于两个字符串，它作为字符串连接运算。"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.less_than_sorting_strings.text"
msgstr "因此，`<` 在两个整数之间作为通常的 'less than'，因为 `13` 小于 `120`，"

#. https://futurecoder.io/course/#Types
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.Types.steps.plus_has_two_meanings.text"
msgstr "不同类型具有不同的方法并支持不同的运算符。"

#. https://futurecoder.io/course/#Types
msgid "pages.Types.title"
msgstr "类型"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.steps.final_text.text"
msgstr "请注意，代码分别运行两次：一次在这里，一次在 pythontutor.com。根据您的程序，这两次运行可能会产生不同的结果。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid ""
"pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text"
msgstr ""
"现在是时候了解另一个工具来探索程序了。将下面的代码复制到编辑器中，然后点击新的“Python Tutor”按钮。该按钮会打开一个新的标签页，展示来自 "
"[pythontutor.com](http://pythontutor.com) "
"的可视化内容。在那里，您可以通过“Prev”或“Next”按钮逐步浏览程序，或者拖动滑块向左或向右。您还可以在右侧查看变量的值。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithPythonTutor
msgid "pages.UnderstandingProgramsWithPythonTutor.title"
msgstr "使用 Python Tutor 理解程序"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.final_text.text"
msgstr "干得好！你正在处理越来越复杂的程序。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.0.text"
msgstr "代码应该几乎完全相同，只需做几个小改动。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.1.text"
msgstr "确保 `if include:` 中的代码在循环的开始部分运行，即在第一次迭代时。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.2.text"
msgstr "这意味着此时 `include` 应该为 `True`。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.3.text"
msgstr "确保 `if include:` 中的代码在第一次迭代后 *不* 运行。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_first_character.hints.4.text"
msgstr "这意味着在第一次迭代后 `include` 应该为 `False`。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_first_character.text"
msgstr "哇！滚动到终端顶部，让我们一起看看 `snoop` 正在向你展示什么。"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.0"
msgstr "Hello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.1"
msgstr "ello World"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.2"
msgstr "Hello Worl"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.3"
msgstr "H"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail.output_prediction_choices.4"
msgstr "d"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail.text"
msgstr "运行这个程序："

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid ""
"pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.requirements"
msgstr "运行上一步的相同程序，但使用 `snoop` 按钮而不是 'Run' 按钮。如果你可能已经更改了程序，请再次复制程序。"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop.text"
msgstr "程序开始变得复杂了！"

#. https://futurecoder.io/course/#UnderstandingProgramsWithSnoop
msgid "pages.UnderstandingProgramsWithSnoop.title"
msgstr "使用 `snoop` 理解程序"

#. https://futurecoder.io/course/#UsingBreak
#.     # __code0__:
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#.     # __code1__:
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.found
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.thing_to_find
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.things
msgid "pages.UsingBreak.steps.final_text.text"
msgstr "很好！"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.0.text"
msgstr "你需要一个循环。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.1.text"
msgstr "你需要一个 `if` 语句。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.2.text"
msgstr "你需要一个比较运算符。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.3.text"
msgstr "特别是 `==`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.4.text"
msgstr "你需要一个布尔变量，在最后打印出来。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.5.text"
msgstr "如果你在列表中找到元素，你应该将该变量设置为 `True`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.6.text"
msgstr "一旦你找到元素，就不能再“未找到”它。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.7.text"
msgstr "这意味着一旦你将变量设置为 `True`，它之后就不应该再设置为其他任何值。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.8.text"
msgstr "不要使用 `else`。"

#. https://futurecoder.io/course/#UsingBreak
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
msgid "pages.UsingBreak.steps.list_contains_exercise.hints.9.text"
msgstr "在循环内部没有理由将变量设置为 `False`。"

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.steps.list_contains_exercise.text"
msgstr "练习：编写一个程序，该程序接受一个列表和一个值，并检查"

#. https://futurecoder.io/course/#UsingBreak
msgid "pages.UsingBreak.title"
msgstr "使用 `break` 提前结束循环"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingDictionaries.steps.dna_part1.text"
msgstr ""
"不错！但你可能注意到它看起来有点尴尬。为什么我们必须在 `cart` 和 `quantities` 中都指定 `'dog'` 和 `'box'`？"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.0.text"
msgstr "这仍然与之前的练习非常相似，只是用字符串而不是数字。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.1.text"
msgstr "你只需考虑 `d` 的键和值。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.2.text"
msgstr "你需要获取正确的值来构建一个字符串以返回。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.3.text"
msgstr "你基本上可以用一行代码替换整个 `if/elif` 链。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.4.text"
msgstr "那一行只需使用 `d` 来获取正确的值。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
msgid "pages.UsingDictionaries.steps.dna_part2.hints.5.text"
msgstr "记住，`d` 的键是 `string` 中的字符。"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27AGTAGCGTCCTTAGTTACAGGATGGCTTAT%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27TCATCGCAGGAATCAATGTCCTACCGAATA%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.expected
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.original
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.string
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.substitute
msgid "pages.UsingDictionaries.steps.dna_part2.text"
msgstr "现在我们可以使用字典使这段代码更短且更通用，以便可以用于其他目的。"

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.steps.final_text.text"
msgstr "很好！这是一个示例，说明这个函数如何用于加密和解密秘密消息："

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.0.text"
msgstr "记住 `prices` 是一个字典。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.1.text"
msgstr "要访问字典中的值，你需要一个键。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
msgid "pages.UsingDictionaries.steps.shopping_cart1.hints.2.text"
msgstr "`prices` 的键是 `cart` 中的项目。"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code2__:
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#.     # __code0__:
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#.     # __code1__:
#.     prices = {'apple': 2, 'apple': 3}
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart1.text"
msgstr "让我们在一个现实生活中的问题中看看字典。想象一下你正在构建一个在线购物网站。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.0.text"
msgstr "记住 `prices` 和 `quantities` 的键是相同的。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.1.text"
msgstr "这与之前的练习非常相似，我们只是在练习。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.2.text"
msgstr "`price` 应该是 `prices` 中的一个值，`quantity` 也是如此。"

#. https://futurecoder.io/course/#UsingDictionaries
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
msgid "pages.UsingDictionaries.steps.shopping_cart4.hints.3.text"
msgstr "应该使用哪个键来获取每个值？"

#. https://futurecoder.io/course/#UsingDictionaries
#.     # __code0__:
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27apple%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27box%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27cat%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27dog%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.assert_equal
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.cart
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.item
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.price
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.prices
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantities
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.quantity
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.result
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.total_cost
msgid "pages.UsingDictionaries.steps.shopping_cart4.text"
msgstr "完美！你发布了你的网站，开始梦想你将会有多富有。"

#. https://futurecoder.io/course/#UsingDictionaries
msgid "pages.UsingDictionaries.title"
msgstr "实践中使用字典"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.final_text.text"
msgstr ""
"太好了！再也没有引号了！我们稍后会详细解释这段代码的内容。现在只需知道 `print(<something>)` 会在 shell 中显示 "
"`<something>`。特别是它显示的是我们通常关心的字符串的实际内容，而不是适合代码的字符串表示形式，例如带有引号的字符串。这里的 `print`"
" 与在纸上印墨无关。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.first_print.text"
msgstr "字符串周围的引号让人感到烦恼。试着运行这个："

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.goodbye_plus_name.text"
msgstr "现在通过再次运行 `__program__` 来观察这个变化的效果。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.hello_plus_name.text"
msgstr "你可以像使用字面量一样在计算中使用变量。例如，试试："

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.assigned_something_else.text"
msgstr "在 `=` 前面放上 `your_name` 来创建一个名为 `your_name` 的变量。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.empty_string.text"
msgstr "对于这个练习，选择一个非空字符串。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid ""
"pages.UsingVariables.steps.name_assign.messages.name_equals_something_else.text"
msgstr "你已经正确写了 `your_name = ` 这一部分，现在在 `=` 的右侧放一个字符串（使用引号）。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
msgid "pages.UsingVariables.steps.name_assign.messages.starts_with_space.text"
msgstr "对于这个练习，选择一个不以空格开头的名字。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.name_assign.requirements"
msgstr "运行类似于 `word = 'Hello'` 的代码，但将 `word` 替换为 `your_name`。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     word = 'Hello'
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.%27Hello%27
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.word
msgid "pages.UsingVariables.steps.name_assign.text"
msgstr "之前我们用这段代码创建了一个名为 `word` 的变量，其值为 `'Hello'`："

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_assign_goodbye.text"
msgstr "完美！"

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name.special_messages.bad_word.text"
msgstr "哎呀，你需要先设置 `word = 'Hello'`，才能继续。"

#. https://futurecoder.io/course/#UsingVariables
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.UsingVariables.steps.word_plus_name.text"
msgstr "或者你可以直接将变量相加。试试："

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.0.text"
msgstr "你需要使用 `+` 两次，就像 1+2+3 一样。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.1.text"
msgstr "你的答案应该包含变量（没有引号）和字符串字面量（有引号）的混合。"

#. https://futurecoder.io/course/#UsingVariables
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
msgid "pages.UsingVariables.steps.word_plus_name_with_space.hints.2.text"
msgstr "你需要在引号内有一个空格字符。"

#. https://futurecoder.io/course/#UsingVariables
msgid ""
"pages.UsingVariables.steps.word_plus_name_with_space.special_messages.bad_word.text"
msgstr "哎呀，你需要先设置 `word = 'Hello'`，才能继续。"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.steps.word_plus_name_with_space.text"
msgstr "哎呀……这看起来不好。你能修改上面的代码，使单词和你的名字之间有一个空格吗？"

#. https://futurecoder.io/course/#UsingVariables
msgid "pages.UsingVariables.title"
msgstr "使用变量和 `print()`"

#. https://futurecoder.io/course/#WritingPrograms
#.     # __code0__:
#.     __program_indented__
#. https://poeditor.com/projects/view_terms?id=490053&search=code_bits.__program_indented__
msgid "pages.WritingPrograms.steps.editor_hello_world.text"
msgstr ""
"是时候停止在 shell 中做所有事情了。在右上角，你可以看到 *editor*。这是一个可以编写和运行更长程序的地方。shell "
"很棒，你应该继续使用它进行探索，但 editor 是真正程序的所在。"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.steps.final_text.text"
msgstr "恭喜你，已经运行了你的第一个实际程序！"

#. https://futurecoder.io/course/#WritingPrograms
msgid "pages.WritingPrograms.title"
msgstr "编写程序"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" went to \""
msgstr "\" 去了 \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\" with \""
msgstr "\" 与 \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\" years old.\""
msgstr "\" 岁。\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!! Warning !!\""
msgstr "\"!! 警告 !!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"!!!! DANGER !!!!\""
msgstr "\"!!!! 危险 !!!!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"++more++\""
msgstr "\"++更多++\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\". You are \""
msgstr "\". 你是 \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".jpg\""
msgstr "\".jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.\".png\""
msgstr "\".png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"=the same=\""
msgstr "\"=相同=\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.\"ABC\""
msgstr "\"ABC\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.\"ABCD\""
msgstr "\"ABCD\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 'Alice' == "Alice"
msgid "code_bits.\"Alice\""
msgstr "\"Alice\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quotes
#. print("Alice's Diner")
msgid "code_bits.\"Alice's Diner\""
msgstr "\"Alice's Diner\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Amazing! Are you psychic?\""
msgstr "\"惊人！你是通灵者吗？\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.\"Bob\""
msgstr "\"Bob\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
msgid "code_bits.\"Charlie\""
msgstr "\"Charlie\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"DANGER\""
msgstr "\"危险\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"English: \""
msgstr "\"英语：\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"French: \""
msgstr "\"法语：\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
msgid "code_bits.\"German: \""
msgstr "\"德语：\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.\"Hello \""
msgstr "\"你好 \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
msgid "code_bits.\"Hello\""
msgstr "\"你好\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.\"How are you?\""
msgstr "\"你好吗？\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
msgid "code_bits.\"I can't process \""
msgstr "\"我无法处理 \""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.\"It's a draw!\""
msgstr "\"平局！\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"Nope!\""
msgstr "\"不！\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.\"OK\""
msgstr "\"好的\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
msgid "code_bits.\"Python rocks!\""
msgstr "\"Python 真棒！\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
msgid "code_bits.\"Python\""
msgstr "\"Python\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.double_quote_exercise
#. print("Special cases aren't special enough to break the rules.")
msgid "code_bits.\"Special cases aren't special enough to break the rules.\""
msgstr "\"特殊情况不足以打破规则。\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
msgid "code_bits.\"Warning\""
msgstr "\"警告\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
msgid "code_bits.\"What number am I thinking of?\""
msgstr "\"我在想哪个数字？\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.\"\\n\""
msgstr "\"\\n\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"abc\""
msgstr "\"abc\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"cat.jpg\""
msgstr "\"cat.jpg\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"def\""
msgstr "\"def\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"dog.png\""
msgstr "\"dog.png\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
msgid "code_bits.\"ghi\""
msgstr "\"ghi\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye world\""
msgstr "\"再见，世界\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"goodbye\""
msgstr "\"再见\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello there\""
msgstr "\"你好啊\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"hello world\""
msgstr "\"你好，世界\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
msgid "code_bits.\"hello\""
msgstr "\"你好\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
msgid "code_bits.\"how are you\""
msgstr "\"你好吗\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
msgid "code_bits.\"invoice.pdf\""
msgstr "\"invoice.pdf\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.\"lunch\""
msgstr "\"午餐\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"more\""
msgstr "\"更多\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
msgid "code_bits.\"the same\""
msgstr "\"相同\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
msgid "code_bits.\"today?\""
msgstr "\"今天？\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.' 123\\n1XOX\\n2O  \\n3 XO'"
msgstr "' 123\\n1XOX\\n2O  \\n3 XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.' is cool!'"
msgstr "' 很酷！'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
msgid "code_bits.' world'"
msgstr "' 世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quote_exercise
#. print('"Talk is cheap. Show me the code." - Linus Torvalds')
msgid "code_bits.'\"Talk is cheap. Show me the code.\" - Linus Torvalds'"
msgstr "'\"说话是廉价的。给我看看代码。\" - Linus Torvalds'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.'AB'"
msgstr "'AB'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.'AGTAGCGTC'"
msgstr "'AGTAGCGTC'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"
msgstr "'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
msgid "code_bits.'Alex'"
msgstr "'Alex'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_double_quotes_equal
#. 'Alice' == "Alice"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
msgid "code_bits.'Alice'"
msgstr "'Alice'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'Amazing'"
msgstr "'惊人'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Bob'"
msgstr "'Bob'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
msgid "code_bits.'Charlie'"
msgstr "'Charlie'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
msgid "code_bits.'Dylan'"
msgstr "'Dylan'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'French'"
msgstr "'法语'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'German'"
msgstr "'德语'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Go!'"
msgstr "'走！'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. word = 'Goodbye'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Goodbye'"
msgstr "'再见'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
msgid "code_bits.'HELLO THERE'"
msgstr "'你好'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
msgid "code_bits.'Hello '"
msgstr "'你好 '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types
#. print(type('Hello World'))
#. print(type(23))
#. print(type(True))
#. print(type([1, 2, 3]))
#. print(type(4.56))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.'Hello World'"
msgstr "'你好，世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
msgid "code_bits.'Hello there'"
msgstr "'你好'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. word = 'Hello'
#. word.append('!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'Hello'"
msgstr "'你好'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'No'"
msgstr "'不'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.'One more exercise, and then you can relax.'"
msgstr "'再做一个练习，然后你可以放松。'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. words = ['Python']
#. print(words[len(words) - 1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append
#. 'Python'.append(' is cool!')
msgid "code_bits.'Python'"
msgstr "'Python'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
msgid "code_bits.'Starting... '"
msgstr "'开始中... '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.'TCATCGCAGGAATCAATGTCCTACCGAATA'"
msgstr "'TCATCGCAGGAATCAATGTCCTACCGAATA'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
msgid "code_bits.'The e key on my keyboard is broken'"
msgstr "'我键盘上的 e 键坏了'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This does not'"
msgstr "'这不'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.first_if_statements
#. if True:
#.     print('This gets printed')
#. if False:
#.     print('This does not')
msgid "code_bits.'This gets printed'"
msgstr "'这会被打印'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'This'"
msgstr "'这'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.'Type your name, then press Enter:'"
msgstr "'输入你的名字，然后按回车：'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. name = 'World'
#. for _ in name:
#.     print(name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.'World'"
msgstr "'世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
msgid "code_bits.'XOX\\nO  \\n XO'"
msgstr "'XOX\\nO  \\n XO'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
msgid "code_bits.'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"
msgstr "'X|O|X\\n-+-+-\\nO| | \\n-+-+-\\n |X|O'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
msgid "code_bits.'Yes'"
msgstr "'是'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline
#. len('\n')
msgid "code_bits.'\\n'"
msgstr "'\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nO to play:\\n'"
msgstr "'\\nO 进行游戏：\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
msgid "code_bits.'\\nX to play:\\n'"
msgstr "'\\nX 进行游戏：\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.not_callable
#. f = 'a string'
#. print(callable(f))
#. f()
msgid "code_bits.'a string'"
msgstr "'一个字符串'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'ab'"
msgstr "'ab'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.'abc'"
msgstr "'abc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'abcqwe'"
msgstr "'abcqwe'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.'aeiou'"
msgstr "'aeiou'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'apfel'"
msgstr "'apfel'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'apple'"
msgstr "'苹果'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
msgid "code_bits.'are'"
msgstr "'是'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.introducing_equality
#. print(1 + 2 == 3)
#. print(4 + 5 == 6)
#. print('ab' + 'c' == 'a' + 'bc')
msgid "code_bits.'bc'"
msgstr "'bc'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'boite'"
msgstr "'boite'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'box'"
msgstr "'盒子'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'cat'"
msgstr "'猫'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'de'"
msgstr "'德'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'def'"
msgstr "'定义'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.'dog'"
msgstr "'狗'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'fghi'"
msgstr "'fghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
msgid "code_bits.'ghi'"
msgstr "'ghi'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.'ghiq'"
msgstr "'ghiq'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye world'"
msgstr "'再见，世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'goodbye'"
msgstr "'再见'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 'hello ' + 'world'
msgid "code_bits.'hello '"
msgstr "'你好 '"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello there'"
msgstr "'你好，那里'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'hello world'"
msgstr "'你好，世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 'hello' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingStrings.steps.hello_string
#. 'hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
msgid "code_bits.'hello'"
msgstr "'你好'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.'how are you'"
msgstr "'你好吗'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'how'"
msgstr "'如何'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'is'"
msgstr "'是'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
msgid "code_bits.'jklmn'"
msgstr "'jklmn'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.'kasten'"
msgstr "'kasten'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.'kesha'"
msgstr "'kesha'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.'list'"
msgstr "'列表'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'on'"
msgstr "'在'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.'pomme'"
msgstr "'苹果'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'store'"
msgstr "'商店'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'the'"
msgstr "'这个'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'there'"
msgstr "'那里'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'to'"
msgstr "'到'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.'way'"
msgstr "'方式'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_string_check
#. 'word'
msgid "code_bits.'word'"
msgstr "'单词'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.final_text.text
#.     'hello ' + 'world'
#.     'hello' + ' world'
#.     'hello' + ' ' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_concat
#. 'hello' + 'world'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.AddingStrings.steps.hello_world_space
#. 'hello ' + 'world'
msgid "code_bits.'world'"
msgstr "'世界'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
msgid "code_bits.'yes'"
msgstr "'是'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
msgid "code_bits.'you'"
msgstr "'你'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise.text
#.     Hello
#.     Hello
msgid "code_bits.Hello"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.using_len_first_time.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.first_birdseye_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotTrueOrTrue.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.introducing_newline.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.mutation_string_append.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_count_index.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_in_step.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.different_types_look_same.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.five_different_types.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.less_than_sorting_strings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.plus_has_two_meanings.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name.text
#.     __program_indented__
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world.text
#.     __program_indented__
msgid "code_bits.__program_indented__"
msgstr "__program_indented__"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.actual"
msgstr "实际"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
msgid "code_bits.age"
msgstr "年龄"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
msgid "code_bits.alert"
msgstr "警报"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
msgid "code_bits.all_equal"
msgstr "全部相等"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal1"
msgstr "all_equal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.all_equal2"
msgstr "all_equal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.all_numbers"
msgstr "所有数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     assert_equal(alert("Warning", 2), "!! Warning !!")
#.     assert_equal(alert("DANGER", 4), "!!!! DANGER !!!!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. def double(x):
#.     return x * 2
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. def double(x):
#.     return x * 3
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.assert_equal"
msgstr "断言相等"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.big_numbers"
msgstr "大数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['X', 'X', 'O'],
#.         ['O', 'O', 'X']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['A', 'B', 'A', 'A'],
#.         ['B', ' ', ' ', 'A'],
#.         [' ', 'A', 'B', 'B'],
#.         [' ', 'A', 'B', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         ['O', ' ', ' '],
#.         [' ', 'X', 'O']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[0][0] = 'X'
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board[1][0] = 'X'
#.     board[2][0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     board = [
#.         ['X', 'O', 'X'],
#.         [' ', 'O', 'O'],
#.         [' ', 'X', ' ']
#.     ]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.board"
msgstr "板"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.board_size"
msgstr "板大小"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c1"
msgstr "c1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c2"
msgstr "c2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c3"
msgstr "c3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
msgid "code_bits.c4"
msgstr "c4"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.cart"
msgstr "购物车"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif.text
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.hints.0.text
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else.text
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
msgid "code_bits.char"
msgstr "字符"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char1"
msgstr "char1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.hints.1.text
#.     for i in range(...):
#.         ...
#.         print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.char2"
msgstr "char2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
msgid "code_bits.character"
msgstr "字符"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.col"
msgstr "列"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.column"
msgstr "列"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner.text
#.     def column_winner(board):
#.         ...
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' '],
#.                 ['X', 'O', ' '],
#.                 ['O', 'X', ' ']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         column_winner(
#.             [
#.                 ['X', 'O', ' ', 'X'],
#.                 [' ', 'O', 'X', 'O'],
#.                 ['O', 'O', 'X', 'X'],
#.                 ['O', 'O', 'X', ' ']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.column_winner"
msgstr "column_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else
#. condition = True
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.first_if_else_false
#. condition = False
#. if condition:
#.     print('Yes')
#. else:
#.     print('No')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.introducing_booleans
#. condition = True
#. print(condition)
#. condition = False
#. print(condition)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.condition"
msgstr "条件"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
msgid "code_bits.confused"
msgstr "困惑"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.consonants"
msgstr "辅音"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.cube"
msgstr "立方体"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal1"
msgstr "diagonal1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.         diagonal1 = all_equal([board[0][0], board[1][1], board[2][2]])
#.         diagonal2 = all_equal([board[2][0], board[1][1], board[0][2]])
#.         return diagonal1 or diagonal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.diagonal2"
msgstr "diagonal2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'O', 'X'],
#.                 ['X', 'X', 'O'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', 'O'],
#.                 ['X', 'O', 'O'],
#.                 ['O', 'X', 'X']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O'],
#.                 ['X', 'X', 'X'],
#.                 ['O', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         ...
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['O', 'X', 'O', 'X'],
#.                 [' ', 'O', 'X', ' '],
#.                 ['X', 'X', ' ', 'X'],
#.                 ['X', ' ', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         diagonal_winner(
#.             [
#.                 ['X', 'X', ' '],
#.                 ['X', ' ', 'O'],
#.                 [' ', 'O', 'O']
#.             ]
#.         ),
#.         False
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.diagonal_winner"
msgstr "diagonal_winner"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.dna"
msgstr "dna"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. def double(x):
#.     return x * 2
#. number = 5
#. double(number)
#. print(number)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal
#. def double(x):
#.     return x * 2
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.make_tests_fail
#. def double(x):
#.     return x * 3
#. assert_equal(double(2), 4)
#. assert_equal(double(5), 10)
msgid "code_bits.double"
msgstr "双倍"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.double_numbers"
msgstr "double_numbers"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.doubles"
msgstr "doubles"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
msgid "code_bits.element"
msgstr "元素"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.entry"
msgstr "条目"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
msgid "code_bits.excited"
msgstr "兴奋"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.expected"
msgstr "预期"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"---\""
msgstr "f\"---\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.eval_expr_inside_f_string
#. f"2 * 3 + 4 is equal to {2 * 3 + 4}"
msgid "code_bits.f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""
msgstr "f\"2 * 3 + 4 等于 {2 * 3 + 4}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"English: {word}\""
msgstr "f\"英语: {word}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.introducing_assert_equal.text
#.     def assert_equal(actual, expected):
#.         if actual == expected:
#.             print("OK")
#.         else:
#.             print(f"Error! {repr(actual)} != {repr(expected)}")
msgid "code_bits.f\"Error! {repr(actual)} != {repr(expected)}\""
msgstr "f\"错误! {repr(actual)} != {repr(expected)}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.f\"Hello {name}!\""
msgstr "f\"你好 {name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.f\"Hello {person_name}!\""
msgstr "f\"你好 {person_name}!\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid ""
"code_bits.f\"There are {len(people)} people waiting, the first one's name is"
" {people[0]}.\""
msgstr "f\"有 {len(people)} 个人在等待，第一个人的名字是 {people[0]}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.f\"{language}: {translations[language]}\""
msgstr "f\"{language}: {translations[language]}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.f\"{letter} {number}\""
msgstr "f\"{letter} {number}\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     f"{name} went to {meal} with {friend}."
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     print(f"{name} went to {meal} with {friend}.")
msgid "code_bits.f\"{name} went to {meal} with {friend}.\""
msgstr "f\"{name} 和 {friend} 一起去吃 {meal}.\""

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid ""
"code_bits.f'  {\" \".join(str(i + 1) for i in "
"range(size))}\\n{line.join(rows)}'"
msgstr "f'  {\" \".join(str(i + 1) for i in range(size))}\\n{line.join(rows)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
msgid "code_bits.f'Hello {name}!'"
msgstr "f'你好 {name}!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
msgid "code_bits.f'Hello {name}. You are {age} years old.'"
msgstr "f'你好 {name}。你 {age} 岁。'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'\\n  {\"+\".join(\"-\" * size)}\\n'"
msgstr "f'\\n  {\"+\".join(\"-\" * size)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.f'\\n{\"+\".join(lines)}\\n'"
msgstr "f'\\n{\"+\".join(lines)}\\n'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{i + 1} {\"|\".join(row)}'"
msgstr "f'{i + 1} {\"|\".join(row)}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.f'{left} x {right} = {left * right}'"
msgstr "f'{left} x {right} = {left * right}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
msgid "code_bits.f'{letter} {number}'"
msgstr "f'{letter} {number}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
msgid "code_bits.f'{player1} vs {player2}'"
msgstr "f'{player1} 对 {player2}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
msgid "code_bits.f'{players[i]} vs {players[j]}'"
msgstr "f'{players[i]} 对 {players[j]}'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} to play:'"
msgstr "f'{player} 进行游戏:'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.f'{player} wins!'"
msgstr "f'{player} 胜利了!'"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.filename"
msgstr "filename"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
msgid "code_bits.first"
msgstr "第一个"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.first_row"
msgstr "第一行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.double_return_in_one_function
#. def foo():
#.     return 1
#.     return 2
#. print(foo())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
msgid "code_bits.foo"
msgstr "foo"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'X|O|X\n-+-+-\nO| | \n-+-+-\n |X|O'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         'XOX\nO  \n XO'
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     def format_board(board):
#.         ...
#.         return ...
#.     assert_equal(format_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers.text
#.     def format_board(board):
#.         ...
#.     assert_equal(
#.         format_board([
#.             ['X', 'O', 'X'],
#.             ['O', ' ', ' '],
#.             [' ', 'X', 'O']
#.         ]),
#.         ' 123\n1XOX\n2O  \n3 XO'
#.     )
msgid "code_bits.format_board"
msgstr "format_board"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.found"
msgstr "找到"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access
#. french[0]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access2
#. french['apple']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access3
#. french['box']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.dict_access4
#. french['pomme']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingDictionaries.steps.first_dict
#. french = {'apple': 'pomme', 'box': 'boite'}
msgid "code_bits.french"
msgstr "法语"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.friend"
msgstr "朋友"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
msgid "code_bits.game_board"
msgstr "游戏板"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
msgid "code_bits.german"
msgstr "德语"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.grade"
msgstr "年级"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
msgid "code_bits.greet"
msgstr "问候"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
msgid "code_bits.guess"
msgstr "猜测"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.hello_plus_equals
#. hello = 'Hello'
#. print(hello)
#. hello = hello + '!'
#. print(hello)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.hello"
msgstr "你好"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.include"
msgstr "包含"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
msgid "code_bits.index"
msgstr "索引"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.indices_out_of_bounds
#. indices[4]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.printing_the_range
#. indices = range(4)
#. print(indices[0])
#. print(indices[1])
#. print(indices[2])
#. print(indices[3])
msgid "code_bits.indices"
msgstr "索引"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.negative_index_concatenation_exercise.text
#.     x = ['a', 'b', 'c']
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_remove_index_subscript_assignment.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_exercise.text
#.     x = ['a', 'b', 'c']
#.     (insert_one_line_from_above)
#.     print(x)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.average_exercise.text
#.     x = [15, 12, -6, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.second_smallest_in_list_exercise.text
#.     x = [12, -6, 2, -1, 3]
#.     y = (insert_one_line_from_above)
#.     print(y)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_range_exercise.text
#.     x = 100
#.     y = (insert_one_line_from_above)
#.     print(y)
msgid "code_bits.insert_one_line_from_above"
msgstr "从上方插入一行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority
#. def invalid_image(filename):
#.     return not (filename.endswith(".png") or filename.endswith(".jpg"))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     def invalid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return False
#.         else:
#.             return True
#.     assert_equal(invalid_image("dog.png"), False)
#.     assert_equal(invalid_image("cat.jpg"), False)
#.     assert_equal(invalid_image("invoice.pdf"), True)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.text
#.     if invalid_image(filename):
#.         print("I can't process " + filename)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.final_text.text
#.     def invalid_image(filename):
#.         return not (filename.endswith(".png") or filename.endswith(".jpg"))
#.     def invalid_image(filename):
#.         return not filename.endswith(".png") and not
#. filename.endswith(".jpg")
msgid "code_bits.invalid_image"
msgstr "无效图像"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
msgid "code_bits.is_friend"
msgstr "是朋友"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise
#. def is_valid_percentage(x):
#.     if 0 <= x and x <= 100:
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.AndExercise.text
#.     def is_valid_percentage(x):
#.         if x < 0 or x > 100:
#.             return False
#.         else:
#.             return True
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         if 0 <= x and x <= 100:
#.             return True
#.         else:
#.             return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def is_valid_percentage(x):
#.         return 0 <= x and x <= 100
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise
#. def is_valid_percentage(x):
#.     if x < 0 or x > 100:
#.         return False
#.     else:
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     assert_equal(is_valid_percentage(-1), False)
#.     assert_equal(is_valid_percentage(0), True)
#.     assert_equal(is_valid_percentage(50), True)
#.     assert_equal(is_valid_percentage(100), True)
#.     assert_equal(is_valid_percentage(101), False)
msgid "code_bits.is_valid_percentage"
msgstr "是有效百分比"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.item"
msgstr "项目"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_row"
msgstr "合并行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.format_board_with_numbers
#. def format_board(board):
#.     first_row = ' '
#.     for i in range(len(board)):
#.         first_row += str(i + 1)
#.     joined_rows = [first_row]
#.     for i in range(len(board)):
#.         joined_row = str(i + 1) + ''.join(board[i])
#.         joined_rows.append(joined_row)
#.     return "\n".join(joined_rows)
msgid "code_bits.joined_rows"
msgstr "合并行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
msgid "code_bits.key"
msgstr "键"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.language"
msgstr "语言"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.left"
msgstr "左"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. things = print([1, 2, 3])
#. length = len(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.length"
msgstr "长度"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length1"
msgstr "长度1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
msgid "code_bits.length2"
msgstr "长度2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
msgid "code_bits.lengths"
msgstr "长度"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
msgid "code_bits.letter"
msgstr "字母"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise
#. letters = 'AB'
#. for c1 in letters:
#.     for c2 in letters:
#.         for c3 in letters:
#.             for c4 in letters:
#.                 print(c1 + c2 + c3 + c4)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.crack_password_exercise.text
#.     letters = "ABCD"
msgid "code_bits.letters"
msgstr "字母"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
msgid "code_bits.level"
msgstr "级别"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line += char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined.text
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.line"
msgstr "行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
msgid "code_bits.lines"
msgstr "行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. list1 = [1, 2, 3]
#. list2 = list1
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
msgid "code_bits.list1"
msgstr "列表1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.final_text.text
#.     list2 = list1.copy()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.same_list
#. list1 = [1, 2, 3]
#. list2 = list1
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.EqualsVsIs.steps.two_separate_lists
#. list1 = [1, 2, 3]
#. list2 = [1, 2, 3]
#. print(list1)
#. print(list2)
#. print(list1 == list2)
#. print(list1 is list2)
#. list1.append(4)
#. print(list1)
#. print(list2)
msgid "code_bits.list2"
msgstr "列表2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.main_diagonal_winner"
msgstr "主对角线赢家"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.make_board"
msgstr "制作棋盘"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
msgid "code_bits.make_cube"
msgstr "制作立方体"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
msgid "code_bits.meal"
msgstr "餐"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.AndHasHigherPriority
#. def diagonal_winner(board):
#.     middle = board[1][1]
#.     return (
#.             (middle == board[0][0] and middle == board[2][2]) or
#.             (middle == board[0][2] and middle == board[2][0])
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningAndAndOr.steps.final_text.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner.text
#.     def diagonal_winner(board):
#.         middle = board[1][1]
#.         return (
#.                 (middle == board[0][0] and middle == board[2][2]) or
#.                 (middle == board[0][2] and middle == board[2][0])
#.         )
msgid "code_bits.middle"
msgstr "中间"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1
#. name = 'World'
#. for character in name:
#.     print('---' + character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_1.text
#.     name = 'World'
#.     for character in name:
#.         print(character)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BasicForLoopExercises.steps.loop_exercise_2
#. name = 'World'
#. for _ in name:
#.     print(name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle
#. name = 'World'
#. line = '-'
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_empty_string
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle_missing_last_line
#. name = 'World'
#. line = '-'
#. for char in name:
#.     print(line)
#.     line = line + char
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. line = '+' + line + '+'
#. print(line)
#. print('|' + name + '|')
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_backwards
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = char + line
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced
#. name = 'World'
#. line = ''
#. for char in name:
#.     line = line + char + ' '
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_triangle_spaced.text
#.     name = 'World'
#.     line = ''
#.     for char in name:
#.         line = line + char
#.         print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_underlined
#. name = 'World'
#. line = ''
#. for _ in name:
#.     line += '-'
#. print(name)
#. print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name.text
#.     name = "Alice"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#.     name = "Bob"
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.define_greet
#. def greet(name):
#.     print(f"Hello {name}!")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you
#. def greet(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. greet("Alice")
#. greet("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.how_are_you.text
#.     def greet(name):
#.         print(f"Hello {name}!")
#.         print("How are you?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name:
#.         print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.missing_indentation.text
#.     for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.one_indented_line
#. name = 'World'
#. for character in name:
#.     print(character)
#. print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Indentation.steps.two_indented_lines
#. name = 'World'
#. for character in name:
#.     print(character)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.first_input
#. print('Type your name, then press Enter:')
#. name = input()
#. print(f'Hello {name}!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingForLoops.steps.first_for_loop
#. name = 'World'
#. for character in name: print(character)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.basic_f_string_exercise
#. name = "Alice"
#. age = 20
#. print(f'Hello {name}. You are {age} years old.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.concatenate_string_number
#. name = "Alice"
#. age = 20
#. print("Hello " + name + ". You are " + age + " years old.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings
#. name = "Alice"
#. friend = 'Bob'
#. meal = "lunch"
#. print(f"{name} went to {meal} with {friend}.")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.requirements
#.     name + " went to " + meal + " with " + friend + '.'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.introduce_f_strings.text
#.     name = "Alice"
#.     friend = 'Bob'
#.     meal = "lunch"
#.     print(name + " went to " + meal + " with " + friend + '.')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ACommonMistake.text
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     (name == "Alice") or ("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == "Alice" or "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     name == ("Alice" or "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.AnExercise.text
#.     return name in ["Alice", "Bob", "Charlie"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement
#. def is_friend(name):
#.     return name == "Alice" or name == "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.requirements
#.     return name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.FurtherImprovement.text
#.     name == "Alice" or name == "Bob"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr
#. def is_friend(name):
#.     if name == "Alice" or name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice" or name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.ImprovingWithOr.text
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InputAliceBob
#. def is_friend(name):
#.     if name == "Alice":
#.         return True
#.     elif name == "Bob":
#.         return True
#.     else:
#.         return False
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingOr.steps.InspectWithBirdseye
#. def is_friend(name):
#.     return name == "Alice" or "Bob"
#. assert_equal(is_friend("Alice"), True)
#. assert_equal(is_friend("Bob"), True)
#. assert_equal(is_friend("Charlie"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MultiLineExpressions.steps.valid_multiline
#. name = "Bob"
#. is_friend = name == "Alice" or \
#.             name == "Bob"
#. print(is_friend)
#. is_friend = (name == "Alice" or
#.              name == "Bob")
#. print(is_friend)
#. is_friend = [name == "Alice",
#.              name == "Bob"]
#. print(is_friend)
#. print(name == "Alice" or
#.       name == "Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.SingleAndDoubleQuotesInStrings.steps.single_quotes_apostrophe.text
#.     name = 'Alice'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.name"
msgstr "名称"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 's':
#.         c = '$'
#.     new_name += c
#. print(new_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheEqualityOperator.steps.if_equals_replacing_characters_exercise
#. name = 'kesha'
#. new_name = ''
#. for c in name:
#.     if c == 'e':
#.         c = '3'
#.     if c == 's':
#.         c = '$'
#.     if c == 'a':
#.         c = '@'
#.     new_name += c
#. print(new_name)
msgid "code_bits.new_name"
msgstr "新名称"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
msgid "code_bits.new_numbers"
msgstr "新数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
msgid "code_bits.new_nums"
msgstr "新数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.new_sentence"
msgstr "新句子"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
msgid "code_bits.new_value"
msgstr "新值"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.not_first"
msgstr "不是第一个"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
msgid "code_bits.num"
msgstr "数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.first_nested_loop
#. for letter in "ABC":
#.     print(letter)
#.     for number in range(4):
#.         print(f'{letter} {number}')
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers:
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.break_vs_return
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 break
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function
#. def foo():
#.     for letter in 'abc':
#.         for number in range(3):
#.             print(f"{letter} {number}")
#.             if letter == 'b':
#.                 return letter
#. foo()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.losing_return_value
#. def double(x):
#.     return x * 2
#. number = 5
#. double(number)
#. print(number)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion
#. number = '1'
#. for i in range(int(number)):
#.     print('Starting... ' + str(i + 1))
#. print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.Types.steps.fixing_type_errors_with_conversion.text
#.     number = '3'
#.     for i in range(number):
#.         print('Starting... ' + i + 1)
#.     print('Go!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.number"
msgstr "数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. double = []
#. for number in numbers:
#.     double += [number * 2]
#. print(double)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [1, 2] + [3, 4]
#.     print(numbers)
#.     new_numbers = []
#.     new_numbers += numbers
#.     new_numbers += [5]
#.     print(new_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.double_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers
#. numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. big_numbers = []
#. for number in numbers:
#.     if number > 5:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     numbers = [[1, 2, 3], [4, 5], [6], []]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers.copy():
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.requirements
#.     for number in numbers:
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy.text
#.     for number in numbers.copy():
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_copy2
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = numbers.copy()
#. for number in numbers:
#.     if number <= 10:
#.         big_numbers.remove(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.make_new_list
#. numbers = [10, 7, 8, 3, 12, 15]
#. big_numbers = []
#. for number in numbers:
#.     if number > 10:
#.         big_numbers.append(number)
#. print(big_numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.remove_instead_of_pop
#. numbers = [10, 7, 8, 3, 12, 15]
#. for number in numbers:
#.     if number <= 10:
#.         numbers.remove(number)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ModifyingWhileIterating.steps.run_broken_with_python_tutor
#. numbers = [10, 7, 8, 3, 12, 15]
#. for i in range(len(numbers)):
#.     number = numbers[i]
#.     if number <= 10:
#.         numbers.pop(i)
#. print(numbers)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values
#. def double_numbers(numbers):
#.     for x in numbers:
#.         return x * 2
#. assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.return_ends_whole_function.text
#.     def double_numbers(numbers):
#.         doubles = []
#.         for x in numbers:
#.             doubles.append(x * 2)
#.         return doubles
#.     assert_equal(double_numbers([1, 2, 3]), [2, 4, 6])
msgid "code_bits.numbers"
msgstr "数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.append_vs_concatenate
#. nums = [1, 2, 3]
#. new_nums = nums + [4, 5]
#. print(new_nums)
#. print(nums)
#. nums.append(4)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise
#. nums = [1, 2, 3]
#. print(nums.pop(1))
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise
#. nums = [1, 2, 3]
#. nums.remove(1)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict
#. nums = [1, 2, 3]
#. nums[1] = 9
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert
#. nums = [1, 2, 3, 4, 5]
#. nums.insert(2, 9)
#. print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.HowToFindInformationWithGoogleAndMore.steps.list_insert.text
#.     nums = [1, 2, 3, 4, 5]
#.     nums.append(9)
#.     print(nums)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise
#. nums = [2, 9, 1, 8, 5, 64]
#. print(7 in nums)
#. print(2 in nums)
msgid "code_bits.nums"
msgstr "数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     if char == 'T':
#.         char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     if char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_elif
#. dna = 'AGTAGCGTC'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     elif char == 'T':
#.         char = 'A'
#.     elif char == 'G':
#.         char = 'C'
#.     elif char == 'C':
#.         char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingElif.steps.dna_example_with_else
#. dna = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. opposite_dna = ''
#. for char in dna:
#.     if char == 'A':
#.         char = 'T'
#.     else:
#.         if char == 'T':
#.             char = 'A'
#.     if char == 'G':
#.         char = 'C'
#.     else:
#.         if char == 'C':
#.             char = 'G'
#.     opposite_dna += char
#. print(opposite_dna)
msgid "code_bits.opposite_dna"
msgstr "相反的DNA"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.original"
msgstr "原始"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingFstrings.steps.fix_broken_program
#. people = ['Alice', 'Bob', 'Charlie']
#. print(f"There are {len(people)} people waiting, the first one's name is
#. {people[0]}.")
msgid "code_bits.people"
msgstr "人们"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.grades_example
#. percentage = 73
#. if percentage < 40:
#.     grade = 'F'
#. elif percentage < 60:
#.     grade = 'C'
#. elif percentage < 80:
#.     grade = 'B'
#. else:
#.     grade = 'A'
#. print(grade)
msgid "code_bits.percentage"
msgstr "百分比"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.person_name"
msgstr "人名"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
msgid "code_bits.piece"
msgstr "片"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_game"
msgstr "玩游戏"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.play_move"
msgstr "移动"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.modify_list_in_function
#. def play_move(board, player):
#.     board[1] = player
#. def play_game():
#.     game_board = [" ", " ", " "]
#.     play_move(game_board, "X")
#.     print(game_board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     board[1][0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     def format_board(board):
#.         first_row = ' '
#.         for i in range(len(board)):
#.             first_row += str(i + 1)
#.         joined_rows = [first_row]
#.         for i in range(len(board)):
#.             joined_row = str(i + 1) + ''.join(board[i])
#.             joined_rows.append(joined_row)
#.         return "\n".join(joined_rows)
#.     def play_game():
#.         board = [
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.             [' ', ' ', ' '],
#.         ]
#.         print(format_board(board))
#.         print('\nX to play:\n')
#.         play_move(board, 'X')
#.         print(format_board(board))
#.         print('\nO to play:\n')
#.         play_move(board, 'O')
#.         print(format_board(board))
#.     def play_move(board, player):
#.         ...
#.     play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player"
msgstr "玩家"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player1"
msgstr "玩家1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.player2"
msgstr "玩家2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.final_text.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#.     for i in range(len(players)):
#.         for j in range(len(players)):
#.             if i < j:
#.                 print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus
#. players = ['Alice', 'Bob', 'Charlie']
#. for i in range(len(players)):
#.     for j in range(len(players)):
#.         if i < j:
#.             print(f'{players[i]} vs {players[j]}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_bonus.text
#.     players = ['Charlie', 'Alice', 'Dylan', 'Bob']
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise
#. players = ['Alice', 'Bob', 'Charlie']
#. for player1 in players:
#.     for player2 in players:
#.         if player1 != player2:
#.             print(f'{player1} vs {player2}')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.player_vs_player_exercise.text
#.     players = ["Alice", "Bob", "Charlie"]
msgid "code_bits.players"
msgstr "玩家们"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.present"
msgstr "现在"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.price"
msgstr "价格"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'apple': 3}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     prices = {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100}
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.prices"
msgstr "价格"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.invalid_multi_line_string.text
#.     assert_equal(print_board([...]), "...")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
msgid "code_bits.print_board"
msgstr "打印棋盘"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_draw"
msgstr "打印平局"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     def print_many(n, thing):
msgid "code_bits.print_many"
msgstr "打印多个"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_twice_exercise
#. def print_twice(x):
#.     print(x)
#.     print(x)
msgid "code_bits.print_twice"
msgstr "打印两次"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.print_winner"
msgstr "打印赢家"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french.text
#.     def print_words(french):
#.         ...
#.     print_words({'apple': 'pomme', 'box': 'boite'})
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german.text
#.     def print_words(french, german):
#.         ...
#.     print_words(
#.         {'apple': 'pomme', 'box': 'boite'},
#.         {'apple': 'apfel', 'box': 'kasten'},
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.print_words"
msgstr "打印单词"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
msgid "code_bits.printed"
msgstr "已打印"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.final_text.text
#.     def quadruple(x):
#.         x = double(x)
#.         x = double(x)
#.         return x
#.     def quadruple(x):
#.         return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.quadruple_exercise
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests
#. def double(x):
#.     return x * 2
#. def quadruple(x):
#.     return double(double(x))
#. assert_equal(quadruple(2), 8)
#. assert_equal(quadruple(5), 20)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.complete_quadruple_tests.text
#.     def double(x):
#.         return x * 2
#.     def quadruple(x):
#.         return double(double(x))
#.     assert_equal(quadruple(2))
#.     assert_equal(quadruple(5))
msgid "code_bits.quadruple"
msgstr "四倍"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys
#. quantities = {'apple': 1, 'cat': 10}
#. print(quantities.keys())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.introducing_keys.text
#.     quantities = {'apple': 1, 'cat': 10}
#.     print(quantities)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities.keys():
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.keys_are_iterable2
#. quantities = {'apple': 1, 'cat': 10}
#. for key in quantities:
#.     print(key)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantities"
msgstr "数量"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.quantity"
msgstr "数量"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         result = ''
#.         for i in range(len(board)):
#.             for char in board[i]:
#.                 result += char
#.             if i != len(board) - 1:
#.                 result += '\n'
#.         return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_simple
#. def format_board(board):
#.     result = ''
#.     for i in range(len(board)):
#.         for char in board[i]:
#.             result += char
#.         if i != len(board) - 1:
#.             result += '\n'
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.result"
msgstr "结果"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.times_table_exercise
#. for left in range(12):
#.     left += 1
#.     for right in range(12):
#.         right += 1
#.         print(f'{left} x {right} = {left * right}')
#.     print('---')
msgid "code_bits.right"
msgstr "右"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow
#. def all_equal(row):
#.     return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.TicTacToeWinningRow.text
#.     def all_equal(row):
#.         ...
#.     assert_equal(all_equal(["X", "X", "X"]), True)
#.     assert_equal(all_equal(["O", "O", "O"]), True)
#.     assert_equal(all_equal(["X", "O", "X"]), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row == [row[0], row[0], row[0]]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.         return row[0] == row[1] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingAnd.steps.final_text.text
#.     def all_equal(row):
#.         return row[0] == row[1] and row[0] == row[2]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.column_winner
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         all_equal = True
#.         piece = board[0][col]
#.         for row in board:
#.             if row[col] == ' ' or row[col] != piece:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     board.append(row.copy())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     board = [row, row, row]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board.text
#.     row[0] = 'X'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input
#. def play_move(board, player):
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_input.text
#.     row = board[1]
#.     row[0] = player
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NestedListAssignment.steps.nested_assignment_two_lines
#. def play_move(board, player):
#.     row = board[1]
#.     row[0] = player
#. def play_game():
#.     board = [
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.         [" ", " ", " "],
#.     ]
#.     play_move(board, "X")
#.     print(board)
#. play_game()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge
#. def format_board(board):
#.     joined_rows = []
#.     for row in board:
#.         joined_rows.append("|".join(row))
#.     lines = []
#.     for _ in board[0]:
#.         lines.append("-")
#.     line = f'\n{"+".join(lines)}\n'
#.     return line.join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.format_board_bonus_challenge.text
#.     def format_board(board):
#.         joined_rows = []
#.         for row in board:
#.             joined_rows.append("".join(row))
#.         return "\n".join(joined_rows)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.one_way_to_print_board
#. def print_board(board):
#.     for row in board:
#.         print("".join(row))
#. print_board([
#.     ['X', 'O', 'X'],
#.     [' ', 'O', 'O'],
#.     [' ', 'X', ' ']
#. ])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row"
msgstr "行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner
#. def row_winner(board):
#.     for row in board:
#.         all_equal = True
#.         piece = row[0]
#.         for entry in row:
#.             if entry == ' ' or piece != entry:
#.                 all_equal = False
#.                 break
#.         if all_equal:
#.             return True
#.     return False
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.intro_row_winner.text
#.     def row_winner(board):
#.         ...
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['A', 'A', 'B', 'A'],
#.                 [' ', ' ', ' ', ' '],
#.                 ['A', ' ', ' ', 'A'],
#.                 ['B', ' ', 'B', 'A']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         row_winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'X'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.row_winner"
msgstr "行赢家"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.rows"
msgstr "行"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_function_name
#. def say_hello(name):
#.     print(f"Hello {name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.change_parameter_name
#. def say_hello(person_name):
#.     print(f"Hello {person_name}!")
#.     print("How are you?")
#. say_hello("Alice")
#. say_hello("Bob")
msgid "code_bits.say_hello"
msgstr "打招呼"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.final_text.text
#.     sentence = 'Hello World'
#.     excited = True
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char
#.         if excited:
#.             new_sentence += '!'
#.     sentence = new_sentence
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CombiningCompoundStatements.steps.for_inside_if
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     new_sentence = ''
#.     for char in sentence:
#.         new_sentence += char + '!'
#.     sentence = new_sentence
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.else_full_stop
#. sentence = 'Hello there'
#. excited = True
#. if excited:
#.     char = '!'
#. else:
#.     char = '.'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.if_upper_else_lower_false
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence = sentence.upper()
#. else:
#.     sentence = sentence.lower()
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     char = '!'
#. sentence += char
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.undefined_char.text
#.     sentence = 'Hello World'
#.     excited = True
#.     if excited:
#.         char = '!'
#.     sentence += char
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise
#. sentence = 'Hello'
#. excited = True
#. confused = True
#. if excited:
#.     sentence += '!'
#. if confused:
#.     sentence += '?'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_confused_exercise.text
#.     sentence = 'Hello World'
#.     excited = False
#.     confused = True
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_example
#. sentence = 'Hello World'
#. excited = True
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingIfStatements.steps.excited_false_example
#. sentence = 'Hello World'
#. excited = False
#. if excited:
#.     sentence += '!'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.brokn_kyboard
#. sentence = 'The e key on my keyboard is broken'
#. new_sentence = ''
#. for c in sentence:
#.     if c != 'e':
#.         new_sentence += c
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper
#. sentence = "Python rocks!"
#. new_sentence = sentence.upper()
#. print(sentence)
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_first_character
#. sentence = 'Hello there'
#. include = True
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithSnoop.steps.print_tail_snoop
#. sentence = 'Hello World'
#. include = False
#. new_sentence = ''
#. for char in sentence:
#.     if include:
#.         new_sentence += char
#.     include = True
#. print(new_sentence)
msgid "code_bits.sentence"
msgstr "句子"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.separator"
msgstr "分隔符"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
msgid "code_bits.sides"
msgstr "边"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise
#. size = 3
#. for i in range(size):
#.     length = size - i
#.     line = ''
#.     for _ in range(length):
#.         line += '+'
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLoops.steps.upside_down_triangle_exercise.text
#.     size = 5
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         board = []
#.         for _ in range(size):
#.             row = []
#.             for _ in range(size):
#.                 row.append(' ')
#.             board.append(row)
#.         return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.fix_make_board
#. def make_board(size):
#.     board = []
#.     for _ in range(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board.append(row)
#.     return board
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.size"
msgstr "大小"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UnderstandingProgramsWithPythonTutor.steps.run_with_python_tutor
#. all_numbers = [2, 4, 8, 1, 9, 7]
#. small_numbers = []
#. big_numbers = []
#. for number in all_numbers:
#.     if number <= 5:
#.         small_numbers.append(number)
#.     else:
#.         big_numbers.append(number)
#. print(small_numbers)
#. print(big_numbers)
msgid "code_bits.small_numbers"
msgstr "小数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list += [element]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingNewLists.steps.filter_numbers.text
#.     some_list.append(element)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.pop_predict_exercise.text
#.     some_list.pop(index)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.subscript_assignment_predict.text
#.     some_list[index] = new_value
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sorted_predict_exercise.text
#.     sorted(some_list)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.sum_predict_exercise.text
#.     sum(some_list)
msgid "code_bits.some_list"
msgstr "一些列表"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.diagonal_name_bonus_challenge
#. name = 'World'
#. spaces = ''
#. for char in name:
#.     print(spaces + char)
#.     spaces += ' '
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStringsExercises.steps.name_box_2
#. name = 'World'
#. line = '+' + name + '+'
#. spaces = ''
#. for _ in name:
#.     spaces += ' '
#. print(line)
#. for char in name:
#.     print(char + spaces + char)
#. print(line)
msgid "code_bits.spaces"
msgstr "空间"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.NewlinesAndFormatBoard.steps.discovering_newline
#. string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise.text
#.     def alert(string, level):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.string"
msgstr "字符串"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string1"
msgstr "字符串1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_exercise
#. string1 = 'Hello'
#. string2 = 'World'
#. for i in range(len(string1)):
#.     char1 = string1[i]
#.     char2 = string2[i]
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise
#. string1 = 'Goodbye'
#. string2 = 'World'
#. length1 = len(string1)
#. length2 = len(string2)
#. if length1 > length2:
#.     length = length1
#. else:
#.     length = length2
#. for i in range(length):
#.     if i < len(string1):
#.         char1 = string1[i]
#.     else:
#.         char1 = ' '
#.     if i < len(string2):
#.         char2 = string2[i]
#.     else:
#.         char2 = ' '
#.     print(char1 + ' ' + char2)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.zip_longest_exercise.text
#.     for i in range(len(string1)):
#.         char1 = string1[i]
#.         char2 = string2[i]
#.         print(char1 + ' ' + char2)
msgid "code_bits.string2"
msgstr "字符串2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting
#. strings = ["abc", "def", "ghi"]
#. print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     print(strings[1][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting.text
#.     string = strings[1]
#.     print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.double_subscripting_exercise
#. strings = ['abc', 'de', 'fghi', 'jklmn', 'o']
#. print(strings[-2][-1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.final_text.text
#.     strings[1].append("today?")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. string = strings[1]
#. print(string[0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.string_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNestedLists.steps.triple_subscripting
#. strings = [['hello', 'there'], ['how', 'are', 'you']]
#. print(strings[1][2][0])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_longest_strings_exercise
#. strings = ['abcqwe', 'def', 'ghiq']
#. lengths = []
#. for string in strings:
#.     lengths.append(len(string))
#. length = max(lengths)
#. for i in range(length):
#.     line = ""
#.     for string in strings:
#.         if i >= len(string):
#.             line += " "
#.         else:
#.             line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise
#. strings = ['abc', 'def', 'ghi']
#. for i in range(len(strings[0])):
#.     line = ""
#.     for string in strings:
#.         line += string[i]
#.     print(line)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.zip_strings_list_exercise.text
#.     strings = ["abc", "def", "ghi"]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.strings"
msgstr "字符串"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_loop_python_tutor
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example
#. numbers = [[1, 2, 3], [4, 5], [6], []]
#. for sublist in numbers:
#.     for num in sublist:
#.         print(num)
#.     print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.nested_list_nested_loop_example.text
#.     for sublist in numbers:
#.         for num in sublist:
#.             print(num)
#.         print('---')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
msgid "code_bits.sublist"
msgstr "子列表"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part1
#. def substitute(string):
#.     result = ''
#.     for char in string:
#.         if char == 'A':
#.             char = 'T'
#.         elif char == 'T':
#.             char = 'A'
#.         elif char == 'G':
#.             char = 'C'
#.         elif char == 'C':
#.             char = 'G'
#.         result += char
#.     return result
#. original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#. expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#. assert_equal(substitute(original), expected)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2
#. def substitute(string, d):
#.     result = ""
#.     for letter in string:
#.         result += d[letter]
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.dna_part2.text
#.     def substitute(string, d):
#.         ...
#.     original = 'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'
#.     expected = 'TCATCGCAGGAATCAATGTCCTACCGAATA'
#.     assert_equal(substitute(original, {'A': 'T', 'T': 'A', 'C': 'G', 'G':
#. 'C'}), expected)
msgid "code_bits.substitute"
msgstr "替代"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.sunshine_undefined_check
#. sunshine
msgid "code_bits.sunshine"
msgstr "阳光"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int
#. super_secret_number = 7
#. print("What number am I thinking of?")
#. guess = input()
#. if int(guess) == super_secret_number:
#.     print("Amazing! Are you psychic?")
#. else:
#.     print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.convert_input_to_int.text
#.     super_secret_number = 7
#.     print("What number am I thinking of?")
#.     guess = input()
#.     if guess == super_secret_number:
#.         print("Amazing! Are you psychic?")
#.     else:
#.         print("Nope!")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if guess == str(super_secret_number):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.InteractiveProgramsWithInput.steps.final_text.text
#.     if int(guess) == super_secret_number:
msgid "code_bits.super_secret_number"
msgstr "超级秘密数字"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.alert_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. def alert(string, level):
#.     string = surround(string, ' ')
#.     for _ in range(level):
#.         string = surround(string, '!')
#.     return string
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise
#. def surround(string, sides):
#.     return sides + string + sides
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     assert_equal(surround("more", "++"), "++more++")
#.     assert_equal(surround("the same", "="), "=the same=")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TestingFunctions.steps.surround_exercise.text
#.     def surround(string, sides):
msgid "code_bits.surround"
msgstr "包围"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello
#.     hello = temp + '!'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.BuildingUpStrings.steps.name_triangle.text
#.     temp = hello + '!'
#.     hello = temp
msgid "code_bits.temp"
msgstr "临时"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.final_text.text
#.     def make_board(size):
#.         row = []
#.         for _ in range(size):
#.             row.append(' ')
#.         board = []
#.         for _ in range(size):
#.             board.append(row.copy())
#.         return board
#.     def make_cube(size):
#.         cube = []
#.         board = make_board(size)
#.         for _ in range(size):
#.             cube.append(board.copy())
#.         return cube
#.     def test():
#.         cube = make_cube(2)
#.         print(cube)
#.         cube[0][0][0] = 'X'
#.         print(cube)
#.         print(cube[0] is cube[1])
#.         print(cube[0][0] is cube[0][1])
#.         print(cube[0][0] is cube[1][0])
#.     test()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MakingTheBoard.steps.naive_make_board
#. def make_board(size):
#.     row = []
#.     for _ in range(size):
#.         row.append(' ')
#.     board = []
#.     for _ in range(size):
#.         board.append(row)
#.     return board
#. def test():
#.     board = make_board(3)
#.     assert_equal(board, [
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#.     board[0][0] = 'X'
#.     assert_equal(board, [
#.         ['X', ' ', ' '],
#.         [' ', ' ', ' '],
#.         [' ', ' ', ' '],
#.     ])
#. test()
msgid "code_bits.test"
msgstr "测试"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.print_twice_call_print_many
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_birdseye
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_pythontutor
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsWithinFunctions.steps.see_stack_in_snoop
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. def print_twice(x):
#.     print_many(2, x)
#. print_twice("Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.print_many
#. def print_many(thing, n):
#.     for _ in range(n):
#.         print(thing)
#. print_many("Hello", 3)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters
#. def print_many(n, thing):
#.     for _ in range(n):
#.         print(thing)
#. print_many(3, "Hello")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     def print_many(n, thing):
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DefiningFunctions.steps.swap_parameters.text
#.     thing = "Hello"
#.     n = 3
#.     for _ in range(n):
#.         print(thing)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.thing"
msgstr "物品"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.thing_to_find"
msgstr "要找的东西"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.len_of_none
#. things = print([1, 2, 3])
#. length = len(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.print_returns_none
#. things = [1, 2, 3]
#. length = len(things)
#. printed = print(length)
#. print(printed)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.can_contain_anything
#. x = 1
#. things = ['Hello', x, x + 3]
#. print(things)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.             break
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.final_text.text
#.     found = False
#.     for thing in things:
#.         if thing == thing_to_find:
#.             found = True
#.     print(found)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingBreak.steps.list_contains_exercise
#. things = ['This', 'is', 'a', 'list']
#. thing_to_find = 'is'
#. found = False
#. for thing in things:
#.     if thing == thing_to_find:
#.         found = True
#. print(found)
msgid "code_bits.things"
msgstr "物品"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPositionExercises.steps.index_exercise
#. things = ['on', 'the', 'way', 'to', 'the', 'store']
#. to_find = 'the'
#. for i in range(len(things)):
#.     if to_find == things[i]:
#.         print(i)
#.         break
msgid "code_bits.to_find"
msgstr "要找"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topleft"
msgstr "左上角"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.diagonal_winner
#. def diagonal_winner(board):
#.     all_equal1 = True
#.     all_equal2 = True
#.     topleft = board[0][0]
#.     topright = board[0][-1]
#.     for i in range(len(board)):
#.         if board[i][i] == ' ' or board[i][i] != topleft:
#.             all_equal1 = False
#.         if board[i][-i - 1] == ' ' or board[i][-i - 1] != topright:
#.             all_equal2 = False
#.     return all_equal1 or all_equal2
msgid "code_bits.topright"
msgstr "右上角"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.numbers_sum
#. numbers = [3, 1, 4, 1, 5, 9]
#. total = 0
#. for number in numbers:
#.     total += number
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.total"
msgstr "总计"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart
#. def total_cost(quantities, prices):
#.     result = 0
#.     for item in quantities:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.cleanup_shopping_cart.text
#.     def total_cost(quantities, prices):
#.         result = 0
#.         for item in ...:
#.             price = prices[item]
#.             quantity = quantities[item]
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1
#. def total_cost(cart, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         result += price
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart1.text
#.     def total_cost(cart, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             result += price
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['apple', 'box', 'cat'],
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         107,
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4
#. def total_cost(cart, quantities, prices):
#.     result = 0
#.     for item in cart:
#.         price = prices[item]
#.         quantity = quantities[item]
#.         result += price * quantity
#.     return result
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingDictionaries.steps.shopping_cart4.text
#.     def total_cost(cart, quantities, prices):
#.         result = 0
#.         for item in cart:
#.             price = ...
#.             quantity = ...
#.             result += price * quantity
#.         return result
#.     assert_equal(
#.         total_cost(
#.             ['dog', 'box'],
#.             {'dog': 5000000, 'box': 2},
#.             {'apple': 2, 'box': 5, 'cat': 100, 'dog': 100},
#.         ),
#.         500000010,
#.     )
msgid "code_bits.total_cost"
msgstr "总成本"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
msgid "code_bits.translations"
msgstr "翻译"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.ReturningValuesFromFunctions.steps.first_return
#. def double(x):
#.     return x * 2
#. number = 5
#. twice = double(number)
#. print(number)
#. print(twice)
msgid "code_bits.twice"
msgstr "两次"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.capitalise
#. sentence = 'HELLO THERE'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.     else:
#.         char = char.lower()
#.     new_sentence += char
#.     upper = False
#. print(new_sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IfAndElse.steps.spongebob
#. sentence = 'One more exercise, and then you can relax.'
#. upper = True
#. new_sentence = ''
#. for char in sentence:
#.     if upper:
#.         char = char.upper()
#.         upper = False
#.     else:
#.         char = char.lower()
#.         upper = True
#.     new_sentence += char
#. print(new_sentence)
msgid "code_bits.upper"
msgstr "上"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.0.text
#.     def valid_image(filename):
#.         if filename.endswith(".png") or filename.endswith(".jpg"):
#.             return True
#.         else:
#.             return False
#.     assert_equal(valid_image("dog.png"), True)
#.     assert_equal(valid_image("cat.jpg"), True)
#.     assert_equal(valid_image("invoice.pdf"), False)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingNotPage.steps.NotPriority.hints.3.text
#.     def valid_image(filename):
#.         return filename.endswith(".png") or filename.endswith(".jpg")
msgid "code_bits.valid_image"
msgstr "有效图像"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.index_predict_exercise.text
#.     some_list.index(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.FunctionsAndMethodsForLists.steps.remove_predict_exercise.text
#.     some_list.remove(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.count_predict_exercise.text
#.     some_list.count(value)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreListFunctionsAndMethods.steps.in_predict_exercise.text
#.     value in some_list
msgid "code_bits.value"
msgstr "值"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value1"
msgstr "值1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.MoreOnReturn.steps.cannot_return_multiple_values.text
#.     if condition:
#.         return value1
#.     else:
#.         return value2
msgid "code_bits.value2"
msgstr "值2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
msgid "code_bits.vowels"
msgstr "元音"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winner"
msgstr "胜利者"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner
#. def winning_line(strings):
#.     piece = strings[0]
#.     if piece == ' ':
#.         return False
#.     for entry in strings:
#.         if piece != entry:
#.             return False
#.     return True
#. def row_winner(board):
#.     for row in board:
#.         if winning_line(row):
#.             return True
#.     return False
#. def column_winner(board):
#.     for col in range(len(board[0])):
#.         column = []
#.         for row in board:
#.             column.append(row[col])
#.         if winning_line(column):
#.             return True
#.     return False
#. def diagonal_winner(board):
#.     diagonal1 = []
#.     diagonal2 = []
#.     for i in range(len(board)):
#.         diagonal1.append(board[i][i])
#.         diagonal2.append(board[i][-i - 1])
#.     return winning_line(diagonal1) or winning_line(diagonal2)
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingTicTacToe.steps.winner.text
#.     def winner(board):
#.         ...
#.     def winning_line(strings):
#.         piece = strings[0]
#.         if piece == ' ':
#.             return False
#.         for entry in strings:
#.             if piece != entry:
#.                 return False
#.         return True
#.     def row_winner(board):
#.         for row in board:
#.             if winning_line(row):
#.                 return True
#.         return False
#.     def column_winner(board):
#.         for col in range(len(board[0])):
#.             column = []
#.             for row in board:
#.                 column.append(row[col])
#.             if winning_line(column):
#.                 return True
#.         return False
#.     def diagonal_winner(board):
#.         diagonal1 = []
#.         diagonal2 = []
#.         for i in range(len(board)):
#.             diagonal1.append(board[i][i])
#.             diagonal2.append(board[i][-i-1])
#.         return winning_line(diagonal1) or winning_line(diagonal2)
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', 'X', 'X', ' '],
#.                 ['X', 'X', ' ', ' '],
#.                 ['X', ' ', 'O', 'X'],
#.                 [' ', ' ', 'O', 'X']
#.             ]
#.         ),
#.         False
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' ', 'X'],
#.                 ['O', 'X', 'O'],
#.                 ['O', 'O', 'O']
#.             ]
#.         ),
#.         True
#.     )
#.     assert_equal(
#.         winner(
#.             [
#.                 ['X', ' '],
#.                 ['X', 'O']
#.             ]
#.         ),
#.         True
#.     )
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game
#. def winning_line(strings):
#.     strings = set(strings)
#.     return len(strings) == 1 and ' ' not in strings
#. def row_winner(board):
#.     return any(winning_line(row) for row in board)
#. def column_winner(board):
#.     return row_winner(zip(*board))
#. def main_diagonal_winner(board):
#.     return winning_line(row[i] for i, row in enumerate(board))
#. def diagonal_winner(board):
#.     return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#. def winner(board):
#.     return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#. def format_board(board):
#.     size = len(board)
#.     line = f'\n  {"+".join("-" * size)}\n'
#.     rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.     return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#. def play_move(board, player):
#.     print(f'{player} to play:')
#.     row = int(input()) - 1
#.     col = int(input()) - 1
#.     board[row][col] = player
#.     print(format_board(board))
#. def make_board(size):
#.     return [[' '] * size for _ in range(size)]
#. def print_winner(player):
#.     print(f'{player} wins!')
#. def print_draw():
#.     print("It's a draw!")
#. def play_game(board_size, player1, player2):
#.     board = make_board(board_size)
#.     print(format_board(board))
#.     player = player1
#.     for _ in range(board_size * board_size):
#.         play_move(board, player)
#.         if winner(board):
#.             print_winner(player)
#.             return
#.         if player == player1:
#.             player = player2
#.         else:
#.             player = player1
#.     print_draw()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.TheFullTicTacToeGame.steps.the_full_game.text
#.     def winning_line(strings):
#.         strings = set(strings)
#.         return len(strings) == 1 and ' ' not in strings
#.     def row_winner(board):
#.         return any(winning_line(row) for row in board)
#.     def column_winner(board):
#.         return row_winner(zip(*board))
#.     def main_diagonal_winner(board):
#.         return winning_line(row[i] for i, row in enumerate(board))
#.     def diagonal_winner(board):
#.         return main_diagonal_winner(board) or
#. main_diagonal_winner(reversed(board))
#.     def winner(board):
#.         return row_winner(board) or column_winner(board) or
#. diagonal_winner(board)
#.     def format_board(board):
#.         size = len(board)
#.         line = f'\n  {"+".join("-" * size)}\n'
#.         rows = [f'{i + 1} {"|".join(row)}' for i, row in enumerate(board)]
#.         return f'  {" ".join(str(i + 1) for i in
#. range(size))}\n{line.join(rows)}'
#.     def play_move(board, player):
#.         print(f'{player} to play:')
#.         row = int(input()) - 1
#.         col = int(input()) - 1
#.         board[row][col] = player
#.         print(format_board(board))
#.     def make_board(size):
#.         return [[' '] * size for _ in range(size)]
#.     def print_winner(player):
#.         print(f'{player} wins!')
#.     def print_draw():
#.         print("It's a draw!")
#.     def play_game(board_size, player1, player2):
#.         board = make_board(board_size)
#.         print(format_board(board))
#.         play_move(board, player1)
#.         play_move(board, player2)
#.         play_move(board, player1)
#.         play_move(board, player2)
#.     play_game(3, 'X', 'O')
msgid "code_bits.winning_line"
msgstr "胜利线"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.methods_of_str
#. word = 'Hello'
#. print(word.upper)
#. print(word.upper())
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.CallingFunctionsTerminology.steps.no_append_for_str
#. word = 'Hello'
#. word.append('!')
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_french
#. def print_words(french):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.english_to_german
#. def print_words(french, german):
#.     for word in french:
#.         print("English: " + word)
#.         print("French: " + french[word])
#.         print("German: " + german[word])
#.         print("---")
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingBirdseye.steps.birdseye_loop_example
#. word = 'Amazing'
#. vowels = []
#. consonants = []
#. for letter in word:
#.     if letter.lower() in 'aeiou':
#.         vowels.append(letter)
#.     else:
#.         consonants.append(letter)
#. print(vowels)
#. print(consonants)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_assign
#. word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingVariables.steps.word_check
#. word
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'are'
#. present = False
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             present = True
#. print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.list_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "Python"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'hello'
#. for sublist in strings:
#.     for string in sublist:
#.         if word in string:
#.             print(string)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.string_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "hello"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise
#. strings = [['hello there', 'how are you'], ['goodbye world', 'hello
#. world']]
#. word = 'goodbye'
#. for sublist in strings:
#.     present = False
#.     for string in sublist:
#.         if word in string:
#.             present = True
#.     print(present)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.LoopingOverNestedLists.steps.sublist_contains_word_exercise.text
#.     strings = [
#.         [
#.             "hello there",
#.             "how are you",
#.         ],
#.         [
#.             "goodbye world",
#.             "hello world",
#.         ]
#.     ]
#.     word = "goodbye"
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. word = 'Goodbye'
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_doesnt_change.text
#.     word = 'Goodbye'
#.     print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StoringCalculationsInVariables.steps.sentence_equals_word_plus_name
#. word = 'Hello'
#. name = 'World'
#. sentence = word + ' ' + name
#. print(sentence)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.final_text.text
#.     if word.lower() == 'yes':
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.StringMethodsUnderstandingMutation.steps.string_lower_upper.text
#.     word.lower()
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. print(word + ' ' + your_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign.text
#.     word = 'Hello'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_assign_goodbye
#. word = 'Goodbye'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. word + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.WritingPrograms.steps.editor_hello_world
#. word = 'Hello'
#. name = 'World'
#. print(word + ' ' + name)
#. word = 'Goodbye'
#. print(word + ' ' + name)
msgid "code_bits.word"
msgstr "单词"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.DictionaryKeysAndValues.steps.nested_dictionaries
#. def print_words(words):
#.     for word in words:
#.         translations = words[word]
#.         print(f"English: {word}")
#.         for language in translations:
#.             print(f"{language}: {translations[language]}")
#.         print(f"---")
#. print_words({
#.     'apple': {
#.         'French': 'pomme',
#.         'German': 'apfel',
#.     },
#.     'box': {
#.         'French': 'boite',
#.         'German': 'kasten',
#.     },
#. })
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words
#. words = ['Python']
#. for index in range(len(words)):
#.     print(index)
#.     print(words[index])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_indices_and_words.text
#.     [0, 1, 2, ..., len(words) - 2, len(words) - 1]
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.GettingElementsAtPosition.steps.print_last_element
#. words = ['Python']
#. print(words[len(words) - 1])
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum
#. words = ['This', 'is', 'a', 'list']
#. total = ''
#. for word in words:
#.     total += word
#. print(total)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.IntroducingLists.steps.strings_sum_bonus
#. words = ['This', 'is', 'a', 'list']
#. separator = ' - '
#. total = ''
#. not_first = False
#. for word in words:
#.     if not_first:
#.         total += separator
#.     total += word
#.     not_first = True
#. print(total)
msgid "code_bits.words"
msgstr "单词"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x1"
msgstr "x1"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x2"
msgstr "x2"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     first = x1
#.     if x2 < first:
#.         first = x2
#.     if x3 < first:
#.         first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     if x1 < x2:
#.         if x1 < x3:
#.             first = x1
#.         else:
#.             first = x3
#.     else:
#.         if x2 < x3:
#.             first = x2
#.         else:
#.             first = x3
#.     print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.final_text.text
#.     x1 = 'Charlie'
#.     x2 = 'Alice'
#.     x3 = 'Bob'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise
#. x1 = 1
#. x2 = 2
#. x3 = 3
#. if x1 < x2:
#.     if x1 < x3:
#.         first = x1
#.     else:
#.         first = x3
#. else:
#.     if x2 < x3:
#.         first = x2
#.     else:
#.         first = x3
#. print(first)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.OtherComparisonOperators.steps.min_three_exercise.text
#.     x1 = 30
#.     x2 = 10
#.     x3 = 20
msgid "code_bits.x3"
msgstr "x3"

#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.first_print
#. print(word + ' ' + your_name)
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.goodbye_plus_name
#. word + ' ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.hello_plus_name
#. 'Hello ' + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.name_assign
#. your_name = 'Alex'
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name
#. word + your_name
#. ------
#. https://poeditor.com/projects/view_terms?id=490053&search=pages.UsingVariables.steps.word_plus_name_with_space
#. word + ' ' + your_name
msgid "code_bits.your_name"
msgstr "你的名字"

msgid "frontend.are_you_sure"
msgstr "你确定吗？"

msgid "frontend.ask_for_help"
msgstr "请求帮助"

msgid "frontend.assessment"
msgstr "评估"

msgid "frontend.assessment_description"
msgstr "当你运行的代码未通过当前步骤时，这部分 *有时* 会解释出错的原因。"

msgid "frontend.assessment_lint"
msgstr "在你的代码中发现以下通用问题："

msgid "frontend.assessment_passed_tests"
msgstr "好消息是，你的代码通过了 ${num} 个测试！"

msgid "frontend.cancel"
msgstr "取消"

msgid "frontend.chat_on_slack"
msgstr "在 Slack 上聊天"

msgid "frontend.click_for_error_details"
msgstr "点击查看错误详情"

msgid "frontend.click_to_expand"
msgstr "点击以展开"

msgid "frontend.contact_directly"
msgstr "或者，你可以直接联系我们："

msgid "frontend.copy_warning"
msgstr "**停止！**"

msgid "frontend.copying_solution_not_allowed"
msgstr "不允许从提示/解决方案区域复制！"

msgid "frontend.current_page"
msgstr "（当前）"

msgid "frontend.description"
msgstr "描述"

msgid "frontend.developer_mode"
msgstr "开发者模式"

msgid "frontend.developer_mode_description"
msgstr "启用“反向步骤”和“跳过步骤”按钮。"

msgid "frontend.did_you_mean"
msgstr "你是想说..."

msgid "frontend.error_has_been_reported"
msgstr "错误已被报告。"

msgid "frontend.error_traceback"
msgstr "错误回溯："

msgid "frontend.exercise_requirement"
msgstr "这一步是一个练习。你需要找出什么代码会产生正确的结果。可能有许多不同的正确答案。"

msgid "frontend.exercise_stdin"
msgstr "你的程序需要通过 `input()` 函数接收用户输入。当测试其正确性时，将模拟不同的用户输入。"

msgid "frontend.feedback"
msgstr "反馈"

msgid "frontend.feedback_email_placeholder"
msgstr "电子邮件（可选）"

msgid "frontend.function_exercise"
msgstr "定义一个函数，开头如下："

msgid "frontend.function_exercise_goal"
msgstr "你的函数需要 `${print_or_return}` 正确的结果。"

msgid "frontend.get_another_hint"
msgstr "获取另一个提示"

msgid "frontend.get_hint"
msgstr "获取提示"

msgid "frontend.give_feedback"
msgstr "提供反馈"

msgid "frontend.give_feedback_from_menu"
msgstr "从左上角菜单提供反馈。"

msgid "frontend.give_feedback_instructions"
msgstr "告诉我们你喜欢或不喜欢什么！如果你在报告一个错误，请详细描述问题："

msgid "frontend.hidden_solution_instructions"
msgstr ""
"上面是一个示例解决方案，但它是隐藏的。请重复点击“显示”按钮，逐步揭示解决方案。尝试在你认为已揭示足够并且可以自己填补剩余空白时停止。然后在编辑器中输入解决方案并运行。你的解决方案不必与上面的相同。"

msgid "frontend.hints_and_solution"
msgstr "提示和解决方案"

msgid "frontend.hints_progress"
msgstr "显示了 ${numHints} 个中的 ${totalHints} 个提示"

msgid "frontend.internal_error_start"
msgstr "哎呀，出了点问题！ ${maybeErrorReported} 你可以做以下事情："

msgid "frontend.loading_wait"
msgstr "加载中..."

msgid "frontend.login_or_sign_up"
msgstr "登录 / 注册"

msgid "frontend.new"
msgstr "新建"

msgid "frontend.next"
msgstr "下一步"

msgid "frontend.no"
msgstr "不"

msgid "frontend.no_hints_available"
msgstr "这一步没有任何提示。请尝试再次阅读说明和要求。如果你真的卡住了，仍然可以查看解决方案。"

msgid "frontend.no_input_variables"
msgstr "这个练习没有输入变量。"

msgid "frontend.non_function_exercise"
msgstr "你的代码 *必须* 以给输入变量赋值开始，例如："

msgid "frontend.ok"
msgstr "好的"

msgid "frontend.open_github_issue"
msgstr "在 GitHub 上打开一个问题"

msgid "frontend.output_prediction_correct"
msgstr "正确！"

msgid "frontend.output_prediction_error_choice"
msgstr "错误"

msgid "frontend.output_prediction_question"
msgstr "你认为结果会是什么？"

msgid "frontend.output_prediction_wrong_once"
msgstr "哎呀，那不对。你可以再试一次！"

msgid "frontend.output_prediction_wrong_twice"
msgstr "抱歉，答案错误。下次再试吧！"

msgid "frontend.parsons_solution_instructions"
msgstr ""
"上面是一个示例解决方案，行顺序不正确。您可以拖动它们以重新排序。找到正确的顺序取决于您，我们不会告诉您是否正确。实验和在编辑器中运行部分解决方案可能会帮助您找出答案。您仍然需要在编辑器中输入正确的解决方案并运行它以继续。"

msgid "frontend.previous"
msgstr "上一个"

msgid "frontend.program_in_text"
msgstr "您需要运行的确切代码在上面的文本中以一个整体显示。"

msgid "frontend.question_wizard"
msgstr "问题向导"

msgid "frontend.question_wizard_expected_output"
msgstr ""
"好的，现在在下面输入您期望/想要的程序输出。如果它正常工作，它会显示什么？如果不应该输出任何内容，请在代码中添加一些 `print()` "
"调用，以便输出一些有用的内容。"

msgid "frontend.question_wizard_intro"
msgstr ""
"如果您需要帮助，有很多网站，如 [Stack Overflow](https://stackoverflow.com/) 和 "
"[reddit](https://www.reddit.com/r/learnpython/)，您可以在上面提问。这是一个帮助您撰写高质量问题的工具，可能会得到答案。"

msgid "frontend.refresh_and_try_again"
msgstr "重新加载/刷新页面并重试。"

msgid "frontend.repeated_frames_description"
msgstr "${name} 在第 ${lineno} 行 (${count} 次)"

msgid "frontend.requirements"
msgstr "要求"

msgid "frontend.requirements_description"
msgstr "您需要根据上面的说明运行一些代码。如果这些说明不够清晰，这里有一些额外的澄清："

msgid "frontend.reveal"
msgstr "显示"

msgid "frontend.reverse_step"
msgstr "反向步骤"

msgid "frontend.run"
msgstr "运行"

msgid "frontend.send_email_to"
msgstr "电子邮件"

msgid "frontend.settings"
msgstr "设置"

msgid "frontend.show_shuffled_solution"
msgstr "显示打乱的解决方案"

msgid "frontend.show_solution"
msgstr "显示解决方案"

msgid "frontend.show_unscrambled_solution"
msgstr "显示未打乱的解决方案"

msgid "frontend.sign_out"
msgstr "登出"

msgid "frontend.similar_frames_skipped"
msgstr "跳过的相似帧："

msgid "frontend.skip_step"
msgstr "跳过步骤"

msgid "frontend.stop"
msgstr "停止"

msgid "frontend.submit"
msgstr "提交"

msgid "frontend.table_of_contents"
msgstr "目录"

msgid "frontend.title"
msgstr "标题"

msgid "frontend.toc_instructions"
msgstr "以下是课程中不同页面的链接。您可以从任何地方开始并以任何顺序进行，每个页面的进度将被记录。"

msgid "frontend.try_running_code_again"
msgstr "再次尝试运行代码。"

msgid "frontend.try_using_different_browser"
msgstr "尝试使用不同的浏览器。"

msgid "frontend.verbatim"
msgstr ""
"此步骤只有一个正确答案。您必须运行完全正确的代码，因此请仔细检查您的拼写。只有少数几种细节（例如某些地方的空格）将被忽略，因为它们对程序没有任何影响。"

msgid "frontend.yes"
msgstr "是"

msgid "chapters.a_bit_more_about_strings.title"
msgstr "关于字符串的更多信息"

msgid "chapters.boolean operators.title"
msgstr "布尔运算符"

msgid "chapters.dictionaries.title"
msgstr "字典"

msgid "chapters.for_loops.title"
msgstr "for 循环"

msgid "chapters.functions.title"
msgstr "函数"

msgid "chapters.if_statements.title"
msgstr "if 语句"

msgid "chapters.lists.title"
msgstr "列表"

msgid "chapters.nested_loops.title"
msgstr "嵌套循环"

msgid "chapters.string_basics.title"
msgstr "字符串基础"

msgid "chapters.the_shell.title"
msgstr "Shell"

msgid "chapters.tic_tac_toe_project.title"
msgstr "井字棋项目"

msgid "chapters.variables.title"
msgstr "变量"

msgid "linting_messages.pyflakes.ImportShadowedByLoopVar.message_format"
msgstr "**导入 `{0}` 被循环变量遮蔽**"

msgid "linting_messages.pyflakes.ImportStarNotPermitted.message_format"
msgstr "**使用 `*` 进行的导入不被允许**"

msgid "linting_messages.pyflakes.IsLiteral.message_format"
msgstr "**与字面量的 `is` 比较**"

msgid "linting_messages.pyflakes.MultiValueRepeatedKeyLiteral.message_format"
msgstr "**字典键 `{0}` 重复且具有不同值**"

msgid "linting_messages.pyflakes.RedefinedWhileUnused.message_format"
msgstr "**未使用时重新定义 `{0}`**"

msgid "linting_messages.pyflakes.UnusedImport.message_format"
msgstr "**未使用的导入 `{0}`**"

msgid "linting_messages.pyflakes.UnusedVariable.message_format"
msgstr "**未使用的变量 `{0}`**"

msgid "misc_terms.blank_result"
msgstr "<无>"

msgid "misc_terms.case_sensitive"
msgstr ""
"Python 是区分大小写的！这意味着小写字母和大写字母很重要，改变它们会改变程序的含义。字符串 `'hello'` 和 `'Hello'` "
"是不同的，变量名 `word` 和 `Word` 也是。"

msgid "misc_terms.code_should_start_like"
msgstr "您的代码应该像这样开始："

msgid "misc_terms.copy_button"
msgstr "复制"

msgid "misc_terms.disallowed_default_label"
msgstr "超过 {max_count} {label}"

msgid "misc_terms.disallowed_default_message"
msgstr "做得好，您找到了一个解决方案！但是，对于这个练习和您的学习，您不允许使用 {label}。"

msgid "misc_terms.expected_mode_birdseye"
msgstr "在编辑器中输入您的代码，点击 `birdseye` 按钮。"

msgid "misc_terms.expected_mode_pythontutor"
msgstr "在编辑器中输入您的代码，点击 Python Tutor 按钮。"

msgid "misc_terms.expected_mode_shell"
msgstr "在 `>>>` 后直接在 shell 中输入您的代码并按 Enter。"

msgid "misc_terms.expected_mode_snoop"
msgstr "在编辑器中输入您的代码，点击 `snoop` 按钮。"

msgid "misc_terms.incorrect_mode"
msgstr "代码是正确的，但您没有按照指示运行它。"

msgid "misc_terms.invalid_inputs"
msgstr "您的输入变量的值无效，请尝试使用类似示例的值。"

msgid "misc_terms.must_define_function"
msgstr "您必须定义一个函数 `{function_name}`"

msgid "misc_terms.no_more_test_inputs"
msgstr "没有更多的测试输入 - 解决方案现在应该完成了"

msgid "misc_terms.not_a_function"
msgstr "`{function_name}` 不是一个函数。"

msgid "misc_terms.q_wiz_debugger"
msgstr "很高兴您在使用调试器！自己解决问题是理想的。如果您无法做到，请使用“运行”按钮生成问题。"

msgid "misc_terms.q_wiz_final_message"
msgstr ""
"\n"
"Great! Here's some final tips:\n"
"\n"
"- Make sure the output is showing the problem you have and not something else.\n"
"- Reduce your code to a **minimal** example. Remove any code that isn't directly related to the problem.\n"
"- Run your code through the `snoop`, `birdseye`, and Python Tutor debuggers to understand what it's doing.\n"
"- Search for your problem online.\n"
"- Read [How do I ask a good question?](https://stackoverflow.com/help/how-to-ask)\n"
"\n"
"If you're really ready, copy and paste the below into the question website,\n"
"and replace the first line with a description of your problem.\n"
"\n"
"You can still change your code or expected output and click Run again to regenerate the question.\n"
"\n"
"    __copyable__\n"
"    *Explain what you're trying to do and why*\n"
"\n"
"    Here's my code:\n"
"\n"
"{}\n"
"\n"
"    This is the result:\n"
"\n"
"{}\n"
"\n"
"    The expected output is:\n"
"\n"
"{}\n"

msgid "misc_terms.q_wiz_input_and_add"
msgstr "并添加"

msgid "misc_terms.q_wiz_input_message_start"
msgstr "`input()` 使得询问和回答有关代码的问题变得更加困难。用字符串替换对输入的调用，以便每个人都可以立即运行代码并获得相同的结果。"

msgid "misc_terms.q_wiz_input_replace_with"
msgstr "替换："

msgid "misc_terms.q_wiz_no_output"
msgstr "您的代码没有输出任何内容。添加一些 `print()` 调用，以便至少输出 *一些东西*。使用代码向读者准确展示问题所在。"

msgid "misc_terms.q_wiz_same_as_expected_output"
msgstr ""
"您的输出与预期输出相同！如果您的问题仍然存在，请调整您的代码和/或预期输出，以便这两个输出不匹配。明确说明如果代码按您希望的方式工作，会有什么不同。"

msgid "misc_terms.signature_should_be"
msgstr "签名应该是："

msgid "misc_terms.string_spaces_differ"
msgstr "检查您代码中的字符串是否具有正确的空格。例如，`'Hello'` 与 `'Hello '` 因为末尾的空格而不同。"

msgid "misc_terms.syntax_error_at_line"
msgstr "在第"

msgid "misc_terms.when_it_should_output"
msgstr "当它应该输出时："

msgid "misc_terms.which_is_correct"
msgstr "哪个是正确的！"

msgid "misc_terms.your_code_outputs"
msgstr "您的代码输出："

msgid "misc_terms.your_code_outputs_given_values"
msgstr "给定这些值："

#. Special choice at the end of all output prediction multiple choice
#. questions
msgid "output_predictions.Error"
msgstr "错误"
